{
    "sourceFile": "Router_firewall.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 42,
            "patches": [
                {
                    "date": 1655711306933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655711680366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,16 @@\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n+            \n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+                                    ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_dest=5555)\n+            out_port = ofproto.OFPP_FLOOD\n+            actions = [parser.OFPActionOutput(3), out_port]\n+            self.add_flow(datapath, 9000, match, actions)\n+            \n+            \n         \n         elif datapath.id == 2:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n@@ -130,8 +138,16 @@\n             actions = []\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n+            \n+            \n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+                                    ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_src=5555)\n+            out_port = ofproto.OFPP_FLOOD\n+            actions = [parser.OFPActionOutput(3), out_port]\n+            self.add_flow(datapath, 9000, match, actions)\n+            \n             actions = []\n     #Utility Function\n     def port_desc(self, datapath):\n         ofparser = datapath.ofproto_parser\n"
                },
                {
                    "date": 1655711870751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,9 +108,9 @@\n             \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_dest=5555)\n             out_port = ofproto.OFPP_FLOOD\n-            actions = [parser.OFPActionOutput(3), out_port]\n+            actions = [parser.OFPActionOutput(out_port)]\n             self.add_flow(datapath, 9000, match, actions)\n             \n             \n         \n"
                },
                {
                    "date": 1655711884688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,9 @@\n             \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_src=5555)\n             out_port = ofproto.OFPP_FLOOD\n-            actions = [parser.OFPActionOutput(3), out_port]\n+            actions = [parser.OFPActionOutput(out_port)]\n             self.add_flow(datapath, 9000, match, actions)\n             \n             actions = []\n     #Utility Function\n"
                },
                {
                    "date": 1655711953720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,15 +105,15 @@\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+            ''' match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_dest=5555)\n             out_port = ofproto.OFPP_FLOOD\n             actions = [parser.OFPActionOutput(out_port)]\n             self.add_flow(datapath, 9000, match, actions)\n+             '''\n             \n-            \n         \n         elif datapath.id == 2:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n@@ -140,13 +140,13 @@\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+          '''   match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_src=5555)\n             out_port = ofproto.OFPP_FLOOD\n             actions = [parser.OFPActionOutput(out_port)]\n-            self.add_flow(datapath, 9000, match, actions)\n+            self.add_flow(datapath, 9000, match, actions) '''\n             \n             actions = []\n     #Utility Function\n     def port_desc(self, datapath):\n"
                },
                {
                    "date": 1655712001320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         actions = []\n \n         self.add_flow(datapath, 1, match, actions)\n         self.port_desc(datapath)\n-\n+''' \n         if datapath.id == 1:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n@@ -105,15 +105,15 @@\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n-            ''' match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_dest=5555)\n             out_port = ofproto.OFPP_FLOOD\n             actions = [parser.OFPActionOutput(out_port)]\n             self.add_flow(datapath, 9000, match, actions)\n-             '''\n             \n+            \n         \n         elif datapath.id == 2:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n@@ -140,15 +140,15 @@\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n-          '''   match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_src=5555)\n             out_port = ofproto.OFPP_FLOOD\n             actions = [parser.OFPActionOutput(out_port)]\n-            self.add_flow(datapath, 9000, match, actions) '''\n+            self.add_flow(datapath, 9000, match, actions)\n             \n-            actions = []\n+            actions = [] '''\n     #Utility Function\n     def port_desc(self, datapath):\n         ofparser = datapath.ofproto_parser\n \n"
                },
                {
                    "date": 1655712010326,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         actions = []\n \n         self.add_flow(datapath, 1, match, actions)\n         self.port_desc(datapath)\n-''' \n+        ''' \n         if datapath.id == 1:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n"
                },
                {
                    "date": 1655712042547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         actions = []\n \n         self.add_flow(datapath, 1, match, actions)\n         self.port_desc(datapath)\n-        ''' \n+\n         if datapath.id == 1:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n@@ -146,9 +146,9 @@\n             out_port = ofproto.OFPP_FLOOD\n             actions = [parser.OFPActionOutput(out_port)]\n             self.add_flow(datapath, 9000, match, actions)\n             \n-            actions = [] '''\n+            actions = []\n     #Utility Function\n     def port_desc(self, datapath):\n         ofparser = datapath.ofproto_parser\n \n"
                },
                {
                    "date": 1655713645536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,9 @@\n         self.add_flow(datapath, 1, match, actions)\n         self.port_desc(datapath)\n \n         if datapath.id == 1:\n+            #bloquear tráfego intra subnets\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n@@ -105,15 +106,15 @@\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n-                                    ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_dest=5555)\n-            out_port = ofproto.OFPP_FLOOD\n-            actions = [parser.OFPActionOutput(out_port)]\n-            self.add_flow(datapath, 9000, match, actions)\n+            #Permitir tráfego TCP HTTP de h1(webserver) para h9 e vice-versa)\n+            match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n+            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n             \n+            self.add_flow(datapath,40000,match,actions)\n+            \n         \n         elif datapath.id == 2:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n"
                },
                {
                    "date": 1655713718080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,15 +106,16 @@\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n-            #Permitir tráfego TCP HTTP de h1(webserver) para h9 e vice-versa)\n+            #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n             match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n-            \n             self.add_flow(datapath,40000,match,actions)\n             \n+            actions = []\n+            \n         \n         elif datapath.id == 2:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n@@ -141,15 +142,18 @@\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n-                                    ipv4_dst = ('10.0.1.1', '255.255.255.255'), ipv4_src = ('10.0.3.3', '255.255.255.255'), tcp_src=5555)\n-            out_port = ofproto.OFPP_FLOOD\n-            actions = [parser.OFPActionOutput(out_port)]\n-            self.add_flow(datapath, 9000, match, actions)\n+            #Permitir tráfego TCP HTTP de h9(webserver) para h1\n+            match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n+            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n+            self.add_flow(datapath,40000,match,actions)\n+            \n             actions = []\n+            \n+            \n+            actions = []\n     #Utility Function\n     def port_desc(self, datapath):\n         ofparser = datapath.ofproto_parser\n \n"
                },
                {
                    "date": 1655713739213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,11 +143,11 @@\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n             \n-            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n+            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n             \n"
                },
                {
                    "date": 1655713744749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,11 +149,9 @@\n             actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n-            \n-            \n-            actions = []\n+          \n     #Utility Function\n     def port_desc(self, datapath):\n         ofparser = datapath.ofproto_parser\n \n"
                },
                {
                    "date": 1655713828538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.id.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath,40000,match,actions)\n             \n@@ -143,11 +143,11 @@\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.id.ofproto_parser.OFPMatch(in_port = 1, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.id.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n             \n-            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n+            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.id.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n"
                },
                {
                    "date": 1655714189435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,11 +107,11 @@\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.id.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n-            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.id.ofproto_parser.OFPActionOutput(2)]\n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n             \n@@ -143,11 +143,11 @@\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.id.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n             \n-            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.id.ofproto_parser.OFPActionOutput(1)]\n+            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n"
                },
                {
                    "date": 1655714200957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n             match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n             \n-            actions=[datapath.id.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n"
                },
                {
                    "date": 1655714266164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,8 +129,19 @@\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n         elif datapath.id == 3:\n+            \n+            #Permitir tráfego TCP HTTP de h9(webserver) para h1\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            \n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n+            self.add_flow(datapath,40000,match,actions)\n+            \n+            actions = []\n+          \n+            \n+            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n                                     ip_proto=6, tcp_dst=5555)\n             self.add_flow(datapath, 3, match, actions)\n@@ -142,16 +153,9 @@\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             \n             \n-            #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n-            \n-            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n-            self.add_flow(datapath,40000,match,actions)\n-            \n-            actions = []\n-          \n+    \n     #Utility Function\n     def port_desc(self, datapath):\n         ofparser = datapath.ofproto_parser\n \n"
                },
                {
                    "date": 1655714279136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,20 @@\n         self.add_flow(datapath, 1, match, actions)\n         self.port_desc(datapath)\n \n         if datapath.id == 1:\n+            \n+            #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+            \n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n+            self.add_flow(datapath,40000,match,actions)\n+            \n+            actions = []\n+            \n+            \n+            \n+            \n             #bloquear tráfego intra subnets\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n@@ -106,16 +118,10 @@\n                                     ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             \n-            #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+ \n             \n-            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n-            self.add_flow(datapath,40000,match,actions)\n-            \n-            actions = []\n-            \n         \n         elif datapath.id == 2:\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n"
                },
                {
                    "date": 1655714587425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,19 +97,19 @@\n         self.port_desc(datapath)\n \n         if datapath.id == 1:\n             \n+            print(datapath)\n+            \n+            \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n             match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n             \n-            \n-            \n-            \n             #bloquear tráfego intra subnets\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n"
                },
                {
                    "date": 1655714891610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,9 +104,9 @@\n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n             match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n-            self.add_flow(datapath,40000,match,actions)\n+            self.add_flow(datapath, 40000, match, actions)\n             \n             actions = []\n             \n             #bloquear tráfego intra subnets\n@@ -122,13 +122,10 @@\n  \n             \n         \n         elif datapath.id == 2:\n+         \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n-                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n-                                    ip_proto=6, tcp_dst=5555)\n-            self.add_flow(datapath, 3, match, actions)\n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n"
                },
                {
                    "date": 1655714910893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,15 +141,9 @@\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n-            \n-            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n-                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n-                                    ip_proto=6, tcp_dst=5555)\n-            self.add_flow(datapath, 3, match, actions)\n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n"
                },
                {
                    "date": 1655715105569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_src=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n@@ -134,9 +134,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n"
                },
                {
                    "date": 1655715130583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_src=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n"
                },
                {
                    "date": 1655715371979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_src=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dst=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n"
                },
                {
                    "date": 1655715478228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dst=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dst=5555, tcp_src=5555)\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n@@ -134,9 +134,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_src=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_src=5555, tcp_dst=5555)\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n"
                },
                {
                    "date": 1655715551901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dst=5555, tcp_src=5555)\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n@@ -134,10 +134,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_src=5555, tcp_dst=5555)\n-            \n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'))\n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n"
                },
                {
                    "date": 1655715621243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n@@ -134,9 +134,10 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n"
                },
                {
                    "date": 1655715707953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,10 +122,13 @@\n  \n             \n         \n         elif datapath.id == 2:\n-         \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n+                                    ip_proto=6, tcp_dst=5555)\n+            self.add_flow(datapath, 3, match, actions)\n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n@@ -141,9 +144,15 @@\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n+            \n+            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n+                                    ip_proto=6, tcp_dst=5555)\n+            self.add_flow(datapath, 3, match, actions)\n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n"
                },
                {
                    "date": 1655715844039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,8 +126,9 @@\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n                                     ip_proto=6, tcp_dst=5555)\n             self.add_flow(datapath, 3, match, actions)\n+            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n@@ -137,12 +138,12 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            '''      match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n-            self.add_flow(datapath,40000,match,actions)\n+            self.add_flow(datapath,40000,match,actions) '''\n             \n             actions = []\n           \n             \n@@ -150,8 +151,10 @@\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n                                     ip_proto=6, tcp_dst=5555)\n             self.add_flow(datapath, 3, match, actions)\n+            \n+            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n"
                },
                {
                    "date": 1655716235982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,21 +138,21 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            '''      match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n-            self.add_flow(datapath,40000,match,actions) '''\n+            self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n             \n             \n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+            '''  match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n                                     ip_proto=6, tcp_dst=5555)\n-            self.add_flow(datapath, 3, match, actions)\n+            self.add_flow(datapath, 3, match, actions) '''\n             \n             \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n"
                },
                {
                    "date": 1655716335792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n             match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n-            self.add_flow(datapath,40000,match,actions)\n+            self.add_flow(datapath,10000,match,actions)\n             \n             actions = []\n           \n             \n"
                },
                {
                    "date": 1655716391767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,12 +147,12 @@\n             actions = []\n           \n             \n             \n-            '''  match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n+            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n                                     ip_proto=6, tcp_dst=5555)\n-            self.add_flow(datapath, 3, match, actions) '''\n+            self.add_flow(datapath, 3, match, actions)\n             \n             \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n"
                },
                {
                    "date": 1655716438178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n             match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n-            self.add_flow(datapath,10000,match,actions)\n+            self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n           \n             \n"
                },
                {
                    "date": 1655716504553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255')\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n"
                },
                {
                    "date": 1655716569729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255')\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n"
                },
                {
                    "date": 1655716575128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -138,9 +138,9 @@\n             actions = []\n         elif datapath.id == 3:\n             \n             #Permitir tráfego TCP HTTP de h9(webserver) para h1\n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_dst=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.3.4','255.255.255.255'), ipv4_dst = ('10.0.1.1','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n"
                },
                {
                    "date": 1655716772212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_port=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dest=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n"
                },
                {
                    "date": 1655716825370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,12 +101,12 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dest=int(5555))\n+            #match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dest=int(5555))\n             \n-            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n-            self.add_flow(datapath, 40000, match, actions)\n+            #actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n+            #self.add_flow(datapath, 40000, match, actions)\n             \n             actions = []\n             \n             #bloquear tráfego intra subnets\n"
                },
                {
                    "date": 1655716846553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,12 +101,12 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            #match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dest=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dest=int(5555))\n             \n-            #actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n-            #self.add_flow(datapath, 40000, match, actions)\n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n+            self.add_flow(datapath, 40000, match, actions)\n             \n             actions = []\n             \n             #bloquear tráfego intra subnets\n"
                },
                {
                    "date": 1655716851846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n             print(datapath)\n             \n             \n             #Permitir tráfego TCP HTTP de h1(webserver) para h9 \n-            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_dest=int(5555))\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.3.4','255.255.255.255'), tcp_src=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n"
                },
                {
                    "date": 1655716915225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,18 +144,10 @@\n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n             \n             actions = []\n-          \n             \n-            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n-                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n-                                    ip_proto=6, tcp_dst=5555)\n-            self.add_flow(datapath, 3, match, actions)\n-            \n-            \n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n"
                },
                {
                    "date": 1655718058750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,17 @@\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:09'), datapath.ofproto_parser.OFPActionOutput(2)]\n             self.add_flow(datapath, 40000, match, actions)\n             \n+            #Permitir Trafego TCP HTTP de h1(webserver) para h5\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.1.2','255.255.255.255'), ipv4_dst = ('10.0.2.3','255.255.255.255'), tcp_src=int(5555))\n+            \n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:05'), datapath.ofproto_parser.OFPActionOutput(1)]\n+            self.add_flow(datapath, 40000, match, actions)\n+            \n+            \n+            \n+            \n             actions = []\n             \n             #bloquear tráfego intra subnets\n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n"
                },
                {
                    "date": 1655718173018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,13 +131,14 @@\n  \n             \n         \n         elif datapath.id == 2:\n-            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n-                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n-                                    ip_proto=6, tcp_dst=5555)\n-            self.add_flow(datapath, 3, match, actions)\n+            match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.2.3','255.255.255.255'), ipv4_dst = ('10.0.1.2','255.255.255.255'), tcp_port=int(5555))\n             \n+            actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n+            self.add_flow(datapath,40000,match,actions)\n+            \n+            \n             match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                     ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n             self.add_flow(datapath, 30000, match, actions)\n             actions = []\n"
                },
                {
                    "date": 1655718199085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,8 +131,10 @@\n  \n             \n         \n         elif datapath.id == 2:\n+            \n+            #Permitir tráfego TCP HTTP de h5(webserver) para h1\n             match = datapath.ofproto_parser.OFPMatch(in_port = 3, eth_type = ether_types.ETH_TYPE_IP, ip_proto = 6, ipv4_src=('10.0.2.3','255.255.255.255'), ipv4_dst = ('10.0.1.2','255.255.255.255'), tcp_port=int(5555))\n             \n             actions=[datapath.ofproto_parser.OFPActionSetField(eth_dst = '00:00:00:00:01:01'), datapath.ofproto_parser.OFPActionOutput(1)]\n             self.add_flow(datapath,40000,match,actions)\n"
                }
            ],
            "date": 1655711306933,
            "name": "Commit-0",
            "content": "from email import parser\nfrom ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ether_types\nfrom ryu.lib.packet import packet_base\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import arp\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import icmp\nfrom ryu.lib.packet import ipv4\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import packet_base\nfrom ryu.lib.packet import tcp\nfrom ryu.lib.packet import udp\nfrom ryu.ofproto import ether\nimport time\n\nETHERNET = ethernet.ethernet.__name__\nIPV4 = ipv4.ipv4.__name__\nARP = arp.arp.__name__\nICMP = icmp.icmp.__name__\nTCP = tcp.tcp.__name__\nUDP = udp.udp.__name__\n\n\n\n\nclass SwitchL3(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    \"\"\"Contrutor para a classe com as seguintes tabelas:\n        - ip_to_mac: dicionario de ip para mac\n        - ip_to_port: dicionario de ip para porta (L3)\n        - router_ports: dicionario de porta para ip \n        - router_ports_to_ip: dicionario de porta para ip, atribuindo o default route\n        - packet_queue: dicionario fila de pacotes arp\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        super(SwitchL3, self).__init__(*args, **kwargs)\n        \n        #Port1 -> R1-R2\n        #Port2 -> R1-R3\n        #Port3 -> Hosts\n        self.ip_to_port = dict()\n        self.ip_to_port[1] = {'10.0.1.2' : 3, '10.0.1.3' : 3, '10.0.1.4' : 3,\n                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n                              '10.0.3.2' : 2, '10.0.3.3' : 2, '10.0.3.4' : 2,}\n        \n        #Port1 -> R2-R1\n        #Port2 -> R2-R3\n        #Port3 -> Hosts\n        self.ip_to_port[2] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n                              '10.0.3.2' : 2, '10.0.3.3' : 2, '10.0.3.4' : 2,}\n        #Port1 -> R3-R1\n        #Port2 -> R3-R2\n        #Port3 -> Hosts\n        self.ip_to_port[3] = {'10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n                              '10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n        \n        self.router_ports_to_ip = dict()\n        self.router_ports_to_ip[1] = {1 : '30.0.1.1', 2 : '40.0.1.1', 3 : '10.0.1.1'}\n        self.router_ports_to_ip[2] = {1 : '30.0.1.2', 2 : '50.0.1.2', 3 : '10.0.2.1'}\n        self.router_ports_to_ip[3] = {1 : '40.0.1.2', 2 : '50.0.1.1', 3 : '10.0.3.1'}\n        \n        self.ip_to_mac = dict()\n        self.packet_queue = dict()\n        self.router_ports = dict()\n   \n\n\n\n    \"\"\"\n    Função responsável pelo evento correspondente ao ennvio das funcionaliades presentes no switch para o controlado\n    \"\"\"\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER, ofproto.OFPCML_NO_BUFFER)]\n\n        self.add_flow(datapath, 0, match, actions)\n\n        match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IPV6)\n        actions = []\n\n        self.add_flow(datapath, 1, match, actions)\n        self.port_desc(datapath)\n\n        if datapath.id == 1:\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n            self.add_flow(datapath, 30000, match, actions)\n            actions = []\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.1.0', '255.255.255.0'))\n            self.add_flow(datapath, 30000, match, actions)\n            actions = []\n        \n        elif datapath.id == 2:\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.2.2', '255.255.255.255'), \n                                    ip_proto=6, tcp_dst=5555)\n            self.add_flow(datapath, 3, match, actions)\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n            self.add_flow(datapath, 30000, match, actions)\n            actions = []\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.3.0', '255.255.255.0'), ipv4_src = ('10.0.2.0', '255.255.255.0'))\n            self.add_flow(datapath, 30000, match, actions)\n            actions = []\n        elif datapath.id == 3:\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.1.2', '255.255.255.255'), ipv4_src = ('10.0.3.4', '255.255.255.255'), \n                                    ip_proto=6, tcp_dst=5555)\n            self.add_flow(datapath, 3, match, actions)\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.1.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n            self.add_flow(datapath, 30000, match, actions)\n            actions = []\n            match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IP,\n                                    ipv4_dst = ('10.0.2.0', '255.255.255.0'), ipv4_src = ('10.0.3.0', '255.255.255.0'))\n            self.add_flow(datapath, 30000, match, actions)\n            actions = []\n    #Utility Function\n    def port_desc(self, datapath):\n        ofparser = datapath.ofproto_parser\n\n        req = ofparser.OFPPortDescStatsRequest(datapath,0)\n        datapath.send_msg(req)\n\n    #Utility Function\n    @set_ev_cls(ofp_event.EventOFPPortDescStatsReply, MAIN_DISPATCHER)\n    def port_desc_stats_reply_handle(self,ev):\n\n        dpid = ev.msg.datapath.id\n        self.router_ports.setdefault(dpid, {})\n        for p in ev.msg.body:\n            self.router_ports[dpid].update({ p.port_no: p.hw_addr})\n        \n        print(\"L3 Switches Conectado dpid:\",dpid)\n        for p in self.router_ports[dpid].keys():\n            if p < 10:\n                print(f\"Porta {p} tem endereço MAC: {self.router_ports[dpid][p]}\")\n                print(\"Cada Port Corresponde a uma subnet\")\n        print(\"\\n\")\n        print(self.router_ports)\n\n    #Adcionar flows\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n \n    #Gestão de pacotes\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def packet_in_handler(self, ev):\n        msg = ev.msg\n        dpid = msg.datapath.id        \n        port = msg.match['in_port']\n        pkt = packet.Packet(msg.data)\n\n        #self.logger.info(\"\\npacket-in %s\" % (pkt,))\n\n        pkt_ethernet = pkt.get_protocol(ethernet.ethernet)\n        if not pkt_ethernet:\n            return\n        pkt_arp = pkt.get_protocol(arp.arp)\n        if pkt_arp:\n            #ARP handling\n            self.handle_arp(msg, port, pkt_ethernet, pkt_arp)\n            return\n        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)\n        if pkt_ipv4:\n            if pkt_ipv4.dst in self.router_ports_to_ip[dpid].values():\n                pkt_icmp = pkt.get_protocol(icmp.icmp)\n                if pkt_icmp:\n                    self.handle_icmp(msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp)\n                    return\n            else:\n                #Static routing handling\n                if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                    self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                    self.ip_to_mac.setdefault(dpid, {})\n                    if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n                        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                        pkt_ethernet.src = self.router_ports[dpid][out_port]\n                        pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n                        self.send_packet(msg.datapath,out_port,pkt)\n                        return\n\n                    else:\n                        #Send ARP Request\n                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n                        self.packet_queue[pkt_ipv4.dst].append(msg)\n                        self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                        self.send_arp_request(msg, pkt_ipv4)\n                        return\n\n                else:\n                    self.logger.info(\"\\nPacket received by router %s from %s to %s (unknown destination)\", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                    self.send_icmp_unreachable(msg, port, pkt_ethernet, pkt_ipv4)\n                    #Send ICMP network unreachable\n                   \n\n    #Enviar arp request\n    def send_arp_request(self, msg, pkt_ipv4):\n        dpid = msg.datapath.id\n        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n        src_mac = self.router_ports[msg.datapath.id][out_port]\n        src_ip = self.router_ports_to_ip[dpid][out_port]\n        \n        print(\"pkt_ipv4.dest:\", pkt_ipv4.dst, \"out_port:\",out_port, \" src_mac:\",src_mac, \" src_ip:\",src_ip)\n\n\n        pkt = packet.Packet()\n        pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                           dst='ff:ff:ff:ff:ff:ff',\n                                           src=src_mac))\n        pkt.add_protocol(arp.arp(opcode=arp.ARP_REQUEST,\n                                 src_mac=src_mac,\n                                 src_ip=src_ip,\n                                 dst_mac='ff:ff:ff:ff:ff:ff',\n                                 dst_ip=pkt_ipv4.dst))\n\n        self.send_packet(msg.datapath,out_port,pkt)\n\n        self.logger.info(\"\\nRouter %s sending ARP Request from port %s to learn MAC of %s\", msg.datapath.id, out_port, pkt_ipv4.dst)\n\n    #Enviar pacote\n    def send_packet(self, datapath, port, pkt):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        pkt.serialize()\n        data = pkt.data\n        actions = [parser.OFPActionOutput(port=port)]\n        out = parser.OFPPacketOut(datapath=datapath,\n                                  buffer_id=ofproto.OFP_NO_BUFFER,\n                                  in_port=ofproto.OFPP_CONTROLLER,\n                                  actions=actions,\n                                  data=data)\n        datapath.send_msg(out)\n\n    #Gerir arp requests\n    def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n        #ARP packet handling.\n        dpid = msg.datapath.id\n        print(port)\n        tp = pkt_arp.dst_ip[:-2]\n        tmp = self.router_ports_to_ip[dpid].values()\n        #remove the last 2 elements of each tmp element, each element is a string\n        tmp = [x[:-2] for x in tmp]\n        if tp in tmp and pkt_arp.opcode == arp.ARP_REQUEST:\n            self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n\n            port_mac = self.router_ports[dpid][port]\n\n            pkt = packet.Packet()\n            pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                        dst=pkt_ethernet.src,\n                                        src=port_mac))\n            pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                src_mac=port_mac,\n                                src_ip=pkt_arp.dst_ip,\n                                dst_mac=pkt_arp.src_mac,\n                                dst_ip=pkt_arp.src_ip))\n            self.send_packet(msg.datapath, port, pkt)\n\n            self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n\n            return\n        elif tp in tmp and pkt_arp.opcode == arp.ARP_REPLY:\n            self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n            self.ip_to_mac.setdefault(dpid, {})\n            self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n\n            for m in self.packet_queue[pkt_arp.src_ip]:\n                dpid = m.datapath.id        \n                pkt = packet.Packet(m.data)\n                pkt_eth = pkt.get_protocol(ethernet.ethernet)\n                pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n                pkt_eth.src = self.router_ports[dpid][out_port]\n                pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n                self.send_packet(msg.datapath,out_port,pkt)\n                self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n\n\n            #cycle through all packets to this ip and forward them\n            return\n        else:\n            self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n            \n            #Any other case pass\n            return\n\n\n    def handle_icmp(self, msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp):\n        # Send ICMP echo reply.\n\n        dpid = msg.datapath.id\n        src_ip = pkt_ipv4.src\n        self.logger.info('\\nICMP echo request received by router %s port %s from %s to %s.', dpid, port, src_ip, pkt_ipv4.dst)\n        pkt = packet.Packet()\n        pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                           dst=pkt_ethernet.src,\n                                           src=self.router_ports[dpid][port]))\n        pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n                                   src=self.router_ports_to_ip[dpid][port],\n                                   proto=pkt_ipv4.proto))\n        pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_ECHO_REPLY,\n                                   code=icmp.ICMP_ECHO_REPLY_CODE,\n                                   csum=0,\n                                   data=pkt_icmp.data))\n        self.send_packet(msg.datapath, port, pkt)\n        self.logger.info('Send ICMP echo reply to [%s].', src_ip)\n        \n        match = parser.OFPMatch(in_port = port,\n                                eth_type=0x0800,\n                                ip_proto=pkt_ipv4.proto,\n                                ipv4_src=pkt_ipv4.src,\n                                ipv4_dst=pkt_ipv4.dst)\n        \n        #Inversao de endereços IPv4 e MAC para resopnder, e o tipo de código de ICMP alterados para reply.\n        set_csum = parser.OFPActionSetField(ipv4_csum=0)\n        set_eth_src = parser.OFPActionSetField(eth_src=pkt_ethernet.src)\n        set_eth_dst = parser.OFPActionSetField(eth_src=pkt_ethernet.src)\n        set_ip_src = parser.OFPActionSetField(ipv4_src=pkt_ipv4.src)\n        set_ip_dst = parser.OFPActionSetField(ipv4_dst=pkt_ipv4.dst)\n        set_icmp_type = parser.OFPActionSetField(icmpv4_type=0)\n        set_icmp_code = parser.OFPActionSetField(icmpv4_code=0)\n        actions = [set_csum, set_eth_src, set_eth_dst, set_ip_src, set_ip_dst, set_icmp_type, set_icmp_code, parser.OFPActionOutput(port)]\n        \n        self.add_flow(msg.datapath, 2, match, actions)\n        out = msg.ofproto_parser.OFPPacketOut(datapath=msg.datapath,\n                                              buffer_id=0xffffffff,\n                                              in_port=msg.ofproto.OFPP_CONTROLLER,\n                                              actions=actions,\n                                              data=packet)\n        msg.datapath.send_msg(out)\n        \n        \n        self.logger.info(\"Entrada na flow table adicionada!\")\n        \n        \n    def send_icmp_unreachable(self, msg, port, pkt_ethernet, pkt_ipv4):\n        dpid = msg.datapath.id\n        port_mac = self.router_ports[msg.datapath.id][port]\n\n        offset = ethernet.ethernet._MIN_LEN\n        end_of_data = offset + len(pkt_ipv4) + 128\n        ip_datagram = bytearray()\n        ip_datagram += msg.data[offset:end_of_data]\n        data_len = int(len(ip_datagram) / 4)\n        length_modulus = int(len(ip_datagram) % 4)\n        if length_modulus:\n            data_len += 1\n            ip_datagram += bytearray([0] * (4 - length_modulus))\n\n        icmp_data = icmp.dest_unreach(data_len=data_len, data=ip_datagram)\n\n        pkt = packet.Packet()\n        pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                            dst=pkt_ethernet.src,\n                                            src=port_mac))\n        pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n                                    src=self.router_ports_to_ip[dpid][port],\n                                    proto=pkt_ipv4.proto))\n        pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_DEST_UNREACH,\n                                    code=icmp.ICMP_HOST_UNREACH_CODE,\n                                    csum=0,\n                                    data=icmp_data))\n        self.send_packet(msg.datapath, port, pkt)\n\n        self.logger.info(\"Router %s sending ICMP Destination Unreachable to %s\", msg.datapath.id, pkt_ipv4.src)\n"
        }
    ]
}