{
    "sourceFile": "Router.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 74,
            "patches": [
                {
                    "date": 1655641622339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655641692382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,8 @@\n                         return\n \n                 else:\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s (unknown destination)\", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n-                    print(self.router_ports_to_ip[dpid])\n                     time.sleep(2)\n                     self.send_icmp_unreachable(msg, port, pkt_ethernet, pkt_ipv4)\n                     #Send ICMP network unreachable\n                    \n"
                },
                {
                    "date": 1655641768405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     #Gerir arp requests\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n-        print(self.router_ports_to_ip(dpid).values())\n+        print(self.router_ports_to_ip[dpid].values())\n         time.sleep(2)\n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n"
                },
                {
                    "date": 1655641945307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n                         }\n \n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{1:'10.0.1.254', 2:'224.0.0.10', 3:'224.0.0.10'},\n+                                    1 :{1:'10.0.1.254', 2:'20.0.0.1', 3:'224.0.0.10'},\n                                     2 :{1:'10.0.2.254', 2:'224.0.0.10', 3:'224.0.0.10'}, \n                                     3 :{1:'10.0.3.254', 2:'224.0.0.10', 3:'224.0.0.10'}\n                                   }\n         self.packet_queue = {}\n"
                },
                {
                    "date": 1655642024632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n                         }\n \n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{1:'10.0.1.254', 2:'20.0.0.1', 3:'224.0.0.10'},\n+                                    1 :{1:'10.0.1.254', 2:'224.0.0.10', 3:'224.0.0.10'},\n                                     2 :{1:'10.0.2.254', 2:'224.0.0.10', 3:'224.0.0.10'}, \n                                     3 :{1:'10.0.3.254', 2:'224.0.0.10', 3:'224.0.0.10'}\n                                   }\n         self.packet_queue = {}\n"
                },
                {
                    "date": 1655642329225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,11 +51,11 @@\n                         }\n \n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{1:'10.0.1.254', 2:'224.0.0.10', 3:'224.0.0.10'},\n-                                    2 :{1:'10.0.2.254', 2:'224.0.0.10', 3:'224.0.0.10'}, \n-                                    3 :{1:'10.0.3.254', 2:'224.0.0.10', 3:'224.0.0.10'}\n+                                    1 :{1:'10.0.1.1', 2:'20.0.0.1', 3:'30.0.0.1'},\n+                                    2 :{1:'10.0.2.1', 2:'20.0.0.1', 3:'40.0.0.1'}, \n+                                    3 :{1:'10.0.3.2', 2:'20.0.0.1', 3:'30.0.0.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655642345343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n                                     1 :{1:'10.0.1.1', 2:'20.0.0.1', 3:'30.0.0.1'},\n                                     2 :{1:'10.0.2.1', 2:'20.0.0.1', 3:'40.0.0.1'}, \n-                                    3 :{1:'10.0.3.2', 2:'20.0.0.1', 3:'30.0.0.1'}\n+                                    3 :{1:'10.0.3.2', 2:'30.0.0.1', 3:'30.0.0.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655642354125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n                             1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1, '20.0.0.2' : 2, '30.0.0.2' :3},\n                             2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1, '20.0.0.1' : 2, '40.0.0.2':3},\n-                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1, '30.0.0.1' : 2, '40.0.0.2':3}\n+                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1, '30.0.0.1' : 2, '20.0.0.2':3}\n                         }\n \n         self.router_ports = {}\n         self.router_ports_to_ip = {\n"
                },
                {
                    "date": 1655644479320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,18 +44,18 @@\n         super(SwitchL3, self).__init__(*args, **kwargs)\n         self.ip_to_mac = {}\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n-                            1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1, '20.0.0.2' : 2, '30.0.0.2' :3},\n-                            2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1, '20.0.0.1' : 2, '40.0.0.2':3},\n-                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1, '30.0.0.1' : 2, '20.0.0.2':3}\n+                            1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1, '10.0.2.2' : 2, '10.0.2.3' :2, '10.0.2.4':2, '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n+                            2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1, '10.0.1.2' : 2, '10.0.1.3':2, '10.0.1.4':2, '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n+                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1, '10.0.2.2' : 2, '10.0.2.3':2, '10.0.2.4':2, '10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':4 }\n                         }\n \n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{1:'10.0.1.1', 2:'20.0.0.1', 3:'30.0.0.1'},\n-                                    2 :{1:'10.0.2.1', 2:'20.0.0.1', 3:'40.0.0.1'}, \n-                                    3 :{1:'10.0.3.2', 2:'30.0.0.1', 3:'30.0.0.1'}\n+                                    1 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'},\n+                                    2 :{1:'10.0.2.1', 2:'10.0.1.1', 3:'10.0.3.1'}, \n+                                    3 :{1:'10.0.3.2', 2:'10.0.2.1', 3:'10.0.1.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655646944463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,19 @@\n         super(SwitchL3, self).__init__(*args, **kwargs)\n         self.ip_to_mac = {}\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n-                            1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1, '10.0.2.2' : 2, '10.0.2.3' :2, '10.0.2.4':2, '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n-                            2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1, '10.0.1.2' : 2, '10.0.1.3':2, '10.0.1.4':2, '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n-                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1, '10.0.2.2' : 2, '10.0.2.3':2, '10.0.2.4':2, '10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':4 }\n+                            1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n+                               '10.0.2.2' : 2, '10.0.2.3' :2, '10.0.2.4':2,\n+                               '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n+                            \n+                            2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n+                               '10.0.1.2' : 2, '10.0.1.3':2, '10.0.1.4':2,\n+                               '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n+                            \n+                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,\n+                               '10.0.2.2' : 2, '10.0.2.3':2, '10.0.2.4':2,\n+                               '10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3 }\n                         }\n \n         self.router_ports = {}\n         self.router_ports_to_ip = {\n"
                },
                {
                    "date": 1655648030810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,21 +44,18 @@\n         super(SwitchL3, self).__init__(*args, **kwargs)\n         self.ip_to_mac = {}\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n-                            1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n-                               '10.0.2.2' : 2, '10.0.2.3' :2, '10.0.2.4':2,\n-                               '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n-                            \n-                            2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                               '10.0.1.2' : 2, '10.0.1.3':2, '10.0.1.4':2,\n-                               '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3},\n-                            \n-                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,\n-                               '10.0.2.2' : 2, '10.0.2.3':2, '10.0.2.4':2,\n-                               '10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3 }\n-                        }\n-\n+                            1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n+                               '10.0.2.1':1,\n+                               '10.0.3.1':2}\n+                            2:{'10.0.1.1':1,\n+                               '10.0.3.1':2,\n+                               '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3}\n+                            3: {'10.0.1.1':1,\n+                                '10.0.2.1:':2,\n+                                '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n+        }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n                                     1 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'},\n                                     2 :{1:'10.0.2.1', 2:'10.0.1.1', 3:'10.0.3.1'}, \n"
                },
                {
                    "date": 1655648124694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,21 +46,21 @@\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n                             1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n                                '10.0.2.1':1,\n-                               '10.0.3.1':2}\n+                               '10.0.3.1':2},\n                             2:{'10.0.1.1':1,\n                                '10.0.3.1':2,\n-                               '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3}\n+                               '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n                             3: {'10.0.1.1':1,\n                                 '10.0.2.1:':2,\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n-        }\n+                            }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'},\n-                                    2 :{1:'10.0.2.1', 2:'10.0.1.1', 3:'10.0.3.1'}, \n-                                    3 :{1:'10.0.3.2', 2:'10.0.2.1', 3:'10.0.1.1'}\n+                                    1 :{3:'10.0.1.1', 1:'10.0.2.1', 2:'10.0.3.1'},\n+                                    2 :{1:'10.0.1.1', 2:'10.0.3.1', 3:'10.0.2.1'}, \n+                                    3 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655648958758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,15 +45,15 @@\n         self.ip_to_mac = {}\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n                             1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n-                               '10.0.2.1':1,\n-                               '10.0.3.1':2},\n-                            2:{'10.0.1.1':1,\n-                               '10.0.3.1':2,\n+                               '10.0.2.2':1,'10.0.2.3':1,'10.0.2.3':1,\n+                               '10.0.3.2':2, '10.0.3.3':2, '10.0.3.4':2,},\n+                            2:{'10.0.1.2':1, '10.0.1.3':1, '10.0.1.4':1,\n+                               '10.0.3.2':2, '10.0.3.3':2, '10.0.3.4':2,\n                                '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n-                            3: {'10.0.1.1':1,\n-                                '10.0.2.1:':2,\n+                            3: {'10.0.1.2':1, '10.0.1.3':1, '10.0.1.4':1,\n+                                '10.0.2.2:':2, '10.0.2.3':2, '10.0.2.4':2,\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n"
                },
                {
                    "date": 1655649512740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,15 +45,15 @@\n         self.ip_to_mac = {}\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n                             1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n-                               '10.0.2.2':1,'10.0.2.3':1,'10.0.2.3':1,\n-                               '10.0.3.2':2, '10.0.3.3':2, '10.0.3.4':2,},\n-                            2:{'10.0.1.2':1, '10.0.1.3':1, '10.0.1.4':1,\n-                               '10.0.3.2':2, '10.0.3.3':2, '10.0.3.4':2,\n+                               '10.0.2.1':1,\n+                               '10.0.3.1':2,},\n+                            2:{'10.0.1.2':1,\n+                               '10.0.3.2':2,\n                                '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n-                            3: {'10.0.1.2':1, '10.0.1.3':1, '10.0.1.4':1,\n-                                '10.0.2.2:':2, '10.0.2.3':2, '10.0.2.4':2,\n+                            3: {'10.0.1.2':1,\n+                                '10.0.2.2:':2,\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n"
                },
                {
                    "date": 1655649693819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,9 +260,8 @@\n   \n             #cycle through all packets to this ip and forward them\n             return\n         else:\n-            print(print)\n             self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n             \n             #Any other case pass\n             return\n"
                },
                {
                    "date": 1655650754499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{3:'10.0.1.1', 1:'10.0.2.1', 2:'10.0.3.1'},\n-                                    2 :{1:'10.0.1.1', 2:'10.0.3.1', 3:'10.0.2.1'}, \n-                                    3 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'}\n+                                    1 :{3:'10.0.1.1', 1:'10.0.2.50', 2:'10.0.3.50'},\n+                                    2 :{1:'10.0.1.50', 2:'10.0.3.50', 3:'10.0.2.1'}, \n+                                    3 :{1:'10.0.1.50', 2:'10.0.2.50', 3:'10.0.3.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655650853292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,13 +47,13 @@\n         self.ip_to_port = {  \n                             1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n                                '10.0.2.1':1,\n                                '10.0.3.1':2,},\n-                            2:{'10.0.1.2':1,\n-                               '10.0.3.2':2,\n+                            2:{'10.0.1.1':1,\n+                               '10.0.3.1':2,\n                                '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n-                            3: {'10.0.1.2':1,\n-                                '10.0.2.2:':2,\n+                            3: {'10.0.1.1':1,\n+                                '10.0.2.1:':2,\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n"
                },
                {
                    "date": 1655650908269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,11 +56,11 @@\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{3:'10.0.1.1', 1:'10.0.2.50', 2:'10.0.3.50'},\n-                                    2 :{1:'10.0.1.50', 2:'10.0.3.50', 3:'10.0.2.1'}, \n-                                    3 :{1:'10.0.1.50', 2:'10.0.2.50', 3:'10.0.3.1'}\n+                                    1 :{3:'10.0.1.1', 1:'10.0.2.1', 2:'10.0.3.1'},\n+                                    2 :{1:'10.0.1.1', 2:'10.0.3.1', 3:'10.0.2.1'}, \n+                                    3 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655651489697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,15 +45,15 @@\n         self.ip_to_mac = {}\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n                             1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n-                               '10.0.2.1':1,\n+                               '10.0.2.50':1,\n                                '10.0.3.1':2,},\n-                            2:{'10.0.1.1':1,\n-                               '10.0.3.1':2,\n+                            2:{'10.0.1.50':1,\n+                               '10.0.3.50':2,\n                                '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n-                            3: {'10.0.1.1':1,\n-                                '10.0.2.1:':2,\n+                            3: {'10.0.1.50':1,\n+                                '10.0.2.50:':2,\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n"
                },
                {
                    "date": 1655652086035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,21 +46,21 @@\n         self.ip_to_mac = {}\n         self.ip_to_port = {  \n                             1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n                                '10.0.2.50':1,\n-                               '10.0.3.1':2,},\n-                            2:{'10.0.1.50':1,\n-                               '10.0.3.50':2,\n+                               '10.0.3.50':2,},\n+                            2:{'10.0.1.51':1,\n+                               '10.0.3.51':2,\n                                '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n-                            3: {'10.0.1.50':1,\n-                                '10.0.2.50:':2,\n+                            3: {'10.0.1.52':1,\n+                                '10.0.2.52:':2,\n                                 '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n                             }\n         self.router_ports = {}\n         self.router_ports_to_ip = {\n-                                    1 :{3:'10.0.1.1', 1:'10.0.2.1', 2:'10.0.3.1'},\n-                                    2 :{1:'10.0.1.1', 2:'10.0.3.1', 3:'10.0.2.1'}, \n-                                    3 :{1:'10.0.1.1', 2:'10.0.2.1', 3:'10.0.3.1'}\n+                                    1 :{3:'10.0.1.1', 1:'10.0.2.50', 2:'10.0.3.50'},\n+                                    2 :{1:'10.0.1.51', 2:'10.0.3.51', 3:'10.0.2.1'}, \n+                                    3 :{1:'10.0.1.52', 2:'10.0.2.52', 3:'10.0.3.1'}\n                                   }\n         self.packet_queue = {}\n  \n         \n"
                },
                {
                    "date": 1655674423200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n from ryu.lib.packet import packet_base\n from ryu.lib.packet import tcp\n from ryu.lib.packet import udp\n from ryu.ofproto import ether\n-import time\n+\n ETHERNET = ethernet.ethernet.__name__\n IPV4 = ipv4.ipv4.__name__\n ARP = arp.arp.__name__\n ICMP = icmp.icmp.__name__\n@@ -38,33 +38,18 @@\n         - router_ports_to_ip: dicionario de porta para ip, atribuindo o default route\n         - packet_queue: dicionario fila de pacotes arp\n     \"\"\"\n \n-\n     def __init__(self, *args, **kwargs):\n         super(SwitchL3, self).__init__(*args, **kwargs)\n         self.ip_to_mac = {}\n-        self.ip_to_mac = {}\n-        self.ip_to_port = {  \n-                            1:{'10.0.1.2':3, '10.0.1.3':3, '10.0.1.4':3,\n-                               '10.0.2.50':1,\n-                               '10.0.3.50':2,},\n-                            2:{'10.0.1.51':1,\n-                               '10.0.3.51':2,\n-                               '10.0.2.2': 3, '10.0.2.3':3, '10.0.2.3':3},\n-                            3: {'10.0.1.52':1,\n-                                '10.0.2.52:':2,\n-                                '10.0.3.2':3, '10.0.3.3':3, '10.0.3.4':3}\n-                            }\n+        self.ip_to_port = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n+                           '10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n+                           '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n         self.router_ports = {}\n-        self.router_ports_to_ip = {\n-                                    1 :{3:'10.0.1.1', 1:'10.0.2.50', 2:'10.0.3.50'},\n-                                    2 :{1:'10.0.1.51', 2:'10.0.3.51', 3:'10.0.2.1'}, \n-                                    3 :{1:'10.0.1.52', 2:'10.0.2.52', 3:'10.0.3.1'}\n-                                  }\n+        self.router_ports_to_ip = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n+        \n         self.packet_queue = {}\n- \n-        \n \n \n     \"\"\"\n     Função responsável pelo evento correspondente ao ennvio das funcionaliades presentes no switch para o controlado\n@@ -144,22 +129,20 @@\n             self.handle_arp(msg, port, pkt_ethernet, pkt_arp)\n             return\n         pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)\n         if pkt_ipv4:\n-    \n-       \n-            if pkt_ipv4.dst in self.router_ports_to_ip[dpid].values():\n+            if pkt_ipv4.dst in self.router_ports_to_ip.values():\n                 pkt_icmp = pkt.get_protocol(icmp.icmp)\n                 if pkt_icmp:\n                     self.handle_icmp(msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp)\n                     return\n             else:\n                 #Static routing handling\n-                if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n+                if pkt_ipv4.dst in self.ip_to_port.keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                     self.ip_to_mac.setdefault(dpid, {})\n                     if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n-                        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n+                        out_port = self.ip_to_port[pkt_ipv4.dst]\n                         pkt_ethernet.src = self.router_ports[dpid][out_port]\n                         pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n                         self.send_packet(msg.datapath,out_port,pkt)\n                         return\n@@ -173,19 +156,17 @@\n                         return\n \n                 else:\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s (unknown destination)\", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n-                    time.sleep(2)\n                     self.send_icmp_unreachable(msg, port, pkt_ethernet, pkt_ipv4)\n                     #Send ICMP network unreachable\n                    \n \n     #Enviar arp request\n     def send_arp_request(self, msg, pkt_ipv4):\n-        dpid = msg.datapath.id\n-        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n+        out_port = self.ip_to_port[pkt_ipv4.dst]\n         src_mac = self.router_ports[msg.datapath.id][out_port]\n-        src_ip = self.router_ports_to_ip[dpid][out_port]\n+        src_ip = self.router_ports_to_ip[out_port]\n \n \n         pkt = packet.Packet()\n         pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n@@ -218,12 +199,11 @@\n     #Gerir arp requests\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n-        print(self.router_ports_to_ip[dpid].values())\n-        time.sleep(2)\n-        if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n \n+        if pkt_arp.dst_ip in self.router_ports_to_ip.values() and pkt_arp.opcode == arp.ARP_REQUEST:\n+\n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n             port_mac = self.router_ports[dpid][port]\n \n@@ -240,9 +220,9 @@\n \n             self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n \n             return\n-        elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n+        elif pkt_arp.dst_ip in self.router_ports_to_ip.values() and pkt_arp.opcode == arp.ARP_REPLY:\n             self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n             self.ip_to_mac.setdefault(dpid, {})\n             self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n@@ -250,9 +230,9 @@\n                 dpid = m.datapath.id        \n                 pkt = packet.Packet(m.data)\n                 pkt_eth = pkt.get_protocol(ethernet.ethernet)\n                 pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n-                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n+                out_port = self.ip_to_port[pkt_arp.src_ip]\n                 pkt_eth.src = self.router_ports[dpid][out_port]\n                 pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n                 self.send_packet(msg.datapath,out_port,pkt)\n                 self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n@@ -277,9 +257,9 @@\n         pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                            dst=pkt_ethernet.src,\n                                            src=self.router_ports[dpid][port]))\n         pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n-                                   src=self.router_ports_to_ip[dpid][port],\n+                                   src=self.router_ports_to_ip[port],\n                                    proto=pkt_ipv4.proto))\n         pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_ECHO_REPLY,\n                                    code=icmp.ICMP_ECHO_REPLY_CODE,\n                                    csum=0,\n@@ -315,9 +295,8 @@\n         self.logger.info(\"Entrada na flow table adicionada!\")\n         \n         \n     def send_icmp_unreachable(self, msg, port, pkt_ethernet, pkt_ipv4):\n-        dpid = msg.datapath.id\n         port_mac = self.router_ports[msg.datapath.id][port]\n \n         offset = ethernet.ethernet._MIN_LEN\n         end_of_data = offset + len(pkt_ipv4) + 128\n@@ -335,14 +314,13 @@\n         pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                             dst=pkt_ethernet.src,\n                                             src=port_mac))\n         pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n-                                    src=self.router_ports_to_ip[dpid][port],\n+                                    src=self.router_ports_to_ip[port],\n                                     proto=pkt_ipv4.proto))\n         pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_DEST_UNREACH,\n                                     code=icmp.ICMP_HOST_UNREACH_CODE,\n                                     csum=0,\n                                     data=icmp_data))\n         self.send_packet(msg.datapath, port, pkt)\n \n         self.logger.info(\"Router %s sending ICMP Destination Unreachable to %s\", msg.datapath.id, pkt_ipv4.src)\n-\n"
                },
                {
                    "date": 1655674724102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,13 +41,21 @@\n \n     def __init__(self, *args, **kwargs):\n         super(SwitchL3, self).__init__(*args, **kwargs)\n         self.ip_to_mac = {}\n-        self.ip_to_port = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n-                           '10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n-                           '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n+        #Port1 -> Hosts\n+        #Port2 -> R1-R2\n+        #Port3 -> R1-R3\n+        self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n+                              '10.0.4.1': 2, '10.0.5.1' : 3} \n+        self.ip_to_port[2] = {'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n+                              '10.0.4.2'\n+        \n+        self.ip_to_port[2] = \n+        self.ip_to_port[3]\n+        \n         self.router_ports = {}\n-        self.router_ports_to_ip = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n         \n         self.packet_queue = {}\n \n \n"
                },
                {
                    "date": 1655674857733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,14 +46,20 @@\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n         self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n                               '10.0.4.1': 2, '10.0.5.1' : 3} \n+        \n+        #Port1 -> Hosts\n+        #Port2 -> R2-R1\n+        #Port3 -> R2-R3\n         self.ip_to_port[2] = {'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                              '10.0.4.2'\n+                              '10.0.4.2' : 2, '10.0.6.1' : 3}\n+        #Port1 -> Hosts\n+        #Port2 -> R3-R1\n+        #Port3 -> R3-R2\n+        self.ip_to_port[3] = {'10.0.3.2': 1, '10.0.3.3': 1, '10.0.3.4': 1,\n+                              '10.0.5.2': 2, '10.0.6.2':3}\n         \n-        self.ip_to_port[2] = \n-        self.ip_to_port[3]\n-        \n         self.router_ports = {}\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n         \n         self.packet_queue = {}\n"
                },
                {
                    "date": 1655674989970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n         self.ip_to_mac = {}\n         #Port1 -> Hosts\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n+        self.ip_to_port = []\n         self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n                               '10.0.4.1': 2, '10.0.5.1' : 3} \n         \n         #Port1 -> Hosts\n@@ -57,12 +58,15 @@\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.3.2': 1, '10.0.3.3': 1, '10.0.3.4': 1,\n                               '10.0.5.2': 2, '10.0.6.2':3}\n-        \n         self.router_ports = {}\n-        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n         \n+        self.router_ports_to_ip = []\n+        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n+        \n         self.packet_queue = {}\n \n \n     \"\"\"\n"
                },
                {
                    "date": 1655675055126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n     \"\"\"\n \n     def __init__(self, *args, **kwargs):\n         super(SwitchL3, self).__init__(*args, **kwargs)\n-        self.ip_to_mac = {}\n+        \n         #Port1 -> Hosts\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n         self.ip_to_port = []\n@@ -58,18 +58,23 @@\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.3.2': 1, '10.0.3.3': 1, '10.0.3.4': 1,\n                               '10.0.5.2': 2, '10.0.6.2':3}\n-        self.router_ports = {}\n         \n         self.router_ports_to_ip = []\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n         \n-        self.packet_queue = {}\n+        self.ip_to_mac = []\n+        self.packet_queue = []\n+        self.router_ports = []\n+        self.ip_to_mac[1,2,3] = {}\n+        self.packet_queue[1,2,3] = {}\n+        self.router_ports[1,2,3] = {}\n \n \n+\n     \"\"\"\n     Função responsável pelo evento correspondente ao ennvio das funcionaliades presentes no switch para o controlado\n     \"\"\"\n     @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n"
                },
                {
                    "date": 1655675113658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -159,13 +159,13 @@\n                     self.handle_icmp(msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp)\n                     return\n             else:\n                 #Static routing handling\n-                if pkt_ipv4.dst in self.ip_to_port.keys():\n+                if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                     self.ip_to_mac.setdefault(dpid, {})\n                     if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n-                        out_port = self.ip_to_port[pkt_ipv4.dst]\n+                        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                         pkt_ethernet.src = self.router_ports[dpid][out_port]\n                         pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n                         self.send_packet(msg.datapath,out_port,pkt)\n                         return\n@@ -185,9 +185,10 @@\n                    \n \n     #Enviar arp request\n     def send_arp_request(self, msg, pkt_ipv4):\n-        out_port = self.ip_to_port[pkt_ipv4.dst]\n+        dpid = msg.datapath.id\n+        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n         src_mac = self.router_ports[msg.datapath.id][out_port]\n         src_ip = self.router_ports_to_ip[out_port]\n \n \n"
                },
                {
                    "date": 1655675156131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -254,9 +254,9 @@\n                 dpid = m.datapath.id        \n                 pkt = packet.Packet(m.data)\n                 pkt_eth = pkt.get_protocol(ethernet.ethernet)\n                 pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n-                out_port = self.ip_to_port[pkt_arp.src_ip]\n+                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n                 pkt_eth.src = self.router_ports[dpid][out_port]\n                 pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n                 self.send_packet(msg.datapath,out_port,pkt)\n                 self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n@@ -281,9 +281,9 @@\n         pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                            dst=pkt_ethernet.src,\n                                            src=self.router_ports[dpid][port]))\n         pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n-                                   src=self.router_ports_to_ip[port],\n+                                   src=self.router_ports_to_ip[dpid][port],\n                                    proto=pkt_ipv4.proto))\n         pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_ECHO_REPLY,\n                                    code=icmp.ICMP_ECHO_REPLY_CODE,\n                                    csum=0,\n"
                },
                {
                    "date": 1655675193096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n             self.handle_arp(msg, port, pkt_ethernet, pkt_arp)\n             return\n         pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)\n         if pkt_ipv4:\n-            if pkt_ipv4.dst in self.router_ports_to_ip.values():\n+            if pkt_ipv4.dst in self.router_ports_to_ip[dpid].values():\n                 pkt_icmp = pkt.get_protocol(icmp.icmp)\n                 if pkt_icmp:\n                     self.handle_icmp(msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp)\n                     return\n@@ -188,9 +188,9 @@\n     def send_arp_request(self, msg, pkt_ipv4):\n         dpid = msg.datapath.id\n         out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n         src_mac = self.router_ports[msg.datapath.id][out_port]\n-        src_ip = self.router_ports_to_ip[out_port]\n+        src_ip = self.router_ports_to_ip[dpid][out_port]\n \n \n         pkt = packet.Packet()\n         pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n@@ -224,9 +224,9 @@\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n \n-        if pkt_arp.dst_ip in self.router_ports_to_ip.values() and pkt_arp.opcode == arp.ARP_REQUEST:\n+        if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n             port_mac = self.router_ports[dpid][port]\n@@ -244,9 +244,9 @@\n \n             self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n \n             return\n-        elif pkt_arp.dst_ip in self.router_ports_to_ip.values() and pkt_arp.opcode == arp.ARP_REPLY:\n+        elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n             self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n             self.ip_to_mac.setdefault(dpid, {})\n             self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n@@ -338,9 +338,9 @@\n         pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                             dst=pkt_ethernet.src,\n                                             src=port_mac))\n         pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n-                                    src=self.router_ports_to_ip[port],\n+                                    src=self.router_ports_to_ip[dpid][port],\n                                     proto=pkt_ipv4.proto))\n         pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_DEST_UNREACH,\n                                     code=icmp.ICMP_HOST_UNREACH_CODE,\n                                     csum=0,\n"
                },
                {
                    "date": 1655675198275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -319,8 +319,9 @@\n         self.logger.info(\"Entrada na flow table adicionada!\")\n         \n         \n     def send_icmp_unreachable(self, msg, port, pkt_ethernet, pkt_ipv4):\n+        dpid = msg.datapath.id\n         port_mac = self.router_ports[msg.datapath.id][port]\n \n         offset = ethernet.ethernet._MIN_LEN\n         end_of_data = offset + len(pkt_ipv4) + 128\n"
                },
                {
                    "date": 1655675278804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,9 +161,9 @@\n             else:\n                 #Static routing handling\n                 if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n-                    self.ip_to_mac.setdefault(dpid, {})\n+                    self.ip_to_mac[dpid].setdefault(dpid, {})\n                     if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n                         out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                         pkt_ethernet.src = self.router_ports[dpid][out_port]\n                         pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n"
                },
                {
                    "date": 1655675303420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,9 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n                         self.packet_queue[pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n"
                },
                {
                    "date": 1655675308920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,9 +172,9 @@\n \n                     else:\n                         #Send ARP Request\n                         self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n-                        self.packet_queue[pkt_ipv4.dst].append(msg)\n+                        self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n \n"
                },
                {
                    "date": 1655675314395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -249,9 +249,9 @@\n             self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n             self.ip_to_mac.setdefault(dpid, {})\n             self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n-            for m in self.packet_queue[pkt_arp.src_ip]:\n+            for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n                 dpid = m.datapath.id        \n                 pkt = packet.Packet(m.data)\n                 pkt_eth = pkt.get_protocol(ethernet.ethernet)\n                 pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n"
                },
                {
                    "date": 1655675498342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         \n         #Port1 -> Hosts\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n-        self.ip_to_port = []\n+        self.ip_to_port = dict()\n         self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n                               '10.0.4.1': 2, '10.0.5.1' : 3} \n         \n         #Port1 -> Hosts\n@@ -59,9 +59,9 @@\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.3.2': 1, '10.0.3.3': 1, '10.0.3.4': 1,\n                               '10.0.5.2': 2, '10.0.6.2':3}\n         \n-        self.router_ports_to_ip = []\n+        self.router_ports_to_ip = dict()\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n         \n"
                },
                {
                    "date": 1655675507953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n         \n-        self.ip_to_mac = []\n-        self.packet_queue = []\n-        self.router_ports = []\n+        self.ip_to_mac = dict()\n+        self.packet_queue = dict()\n+        self.router_ports = dict()\n         self.ip_to_mac[1,2,3] = {}\n         self.packet_queue[1,2,3] = {}\n         self.router_ports[1,2,3] = {}\n \n"
                },
                {
                    "date": 1655675834711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,52 +224,53 @@\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n \n-        if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n+        for router in self.router_ports_to_ip:\n+            if pkt_arp.dst_ip in router.values() and pkt_arp.opcode == arp.ARP_REQUEST:\n \n-            self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n+                self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n-            port_mac = self.router_ports[dpid][port]\n+                port_mac = self.router_ports[dpid][port]\n \n-            pkt = packet.Packet()\n-            pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n-                                           dst=pkt_ethernet.src,\n-                                           src=port_mac))\n-            pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n-                                 src_mac=port_mac,\n-                                 src_ip=pkt_arp.dst_ip,\n-                                 dst_mac=pkt_arp.src_mac,\n-                                 dst_ip=pkt_arp.src_ip))\n-            self.send_packet(msg.datapath, port, pkt)\n+                pkt = packet.Packet()\n+                pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n+                                            dst=pkt_ethernet.src,\n+                                            src=port_mac))\n+                pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n+                                    src_mac=port_mac,\n+                                    src_ip=pkt_arp.dst_ip,\n+                                    dst_mac=pkt_arp.src_mac,\n+                                    dst_ip=pkt_arp.src_ip))\n+                self.send_packet(msg.datapath, port, pkt)\n \n-            self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n+                self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n \n-            return\n-        elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n-            self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n-            self.ip_to_mac.setdefault(dpid, {})\n-            self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n+                return\n+            elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n+                self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n+                self.ip_to_mac.setdefault(dpid, {})\n+                self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n-            for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n-                dpid = m.datapath.id        \n-                pkt = packet.Packet(m.data)\n-                pkt_eth = pkt.get_protocol(ethernet.ethernet)\n-                pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n-                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n-                pkt_eth.src = self.router_ports[dpid][out_port]\n-                pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n-                self.send_packet(msg.datapath,out_port,pkt)\n-                self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n+                for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n+                    dpid = m.datapath.id        \n+                    pkt = packet.Packet(m.data)\n+                    pkt_eth = pkt.get_protocol(ethernet.ethernet)\n+                    pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n+                    out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n+                    pkt_eth.src = self.router_ports[dpid][out_port]\n+                    pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n+                    self.send_packet(msg.datapath,out_port,pkt)\n+                    self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n \n-  \n-            #cycle through all packets to this ip and forward them\n-            return\n-        else:\n-            self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n-            \n-            #Any other case pass\n-            return\n+    \n+                #cycle through all packets to this ip and forward them\n+                return\n+            else:\n+                self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n+                \n+                #Any other case pass\n+                return\n \n \n     def handle_icmp(self, msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp):\n         # Send ICMP echo reply.\n"
                },
                {
                    "date": 1655675923977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n         #ARP packet handling.\n         dpid = msg.datapath.id\n \n         for router in self.router_ports_to_ip:\n-            if pkt_arp.dst_ip in router.values() and pkt_arp.opcode == arp.ARP_REQUEST:\n+            if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n \n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n                 port_mac = self.router_ports[dpid][port]\n"
                },
                {
                    "date": 1655675938810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,9 +229,9 @@\n             if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n \n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n-                port_mac = self.router_ports[dpid][port]\n+                port_mac = self.router_ports[router][port]\n \n                 pkt = packet.Packet()\n                 pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                             dst=pkt_ethernet.src,\n@@ -245,9 +245,9 @@\n \n                 self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n \n                 return\n-            elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n+            elif pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REPLY:\n                 self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n                 self.ip_to_mac.setdefault(dpid, {})\n                 self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n"
                },
                {
                    "date": 1655676003474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,8 +230,9 @@\n \n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n                 port_mac = self.router_ports[router][port]\n+                print(port_mac)\n \n                 pkt = packet.Packet()\n                 pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                             dst=pkt_ethernet.src,\n"
                },
                {
                    "date": 1655676101178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,8 +115,9 @@\n             if p < 10:\n                 print(f\"Porta {p} tem endereço MAC: {self.router_ports[dpid][p]}\")\n                 print(\"Cada Port Corresponde a uma subnet\")\n         print(\"\\n\")\n+        print(self.router_ports[dpid])\n \n     #Adcionar flows\n     def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n         ofproto = datapath.ofproto\n"
                },
                {
                    "date": 1655676149869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,9 +115,9 @@\n             if p < 10:\n                 print(f\"Porta {p} tem endereço MAC: {self.router_ports[dpid][p]}\")\n                 print(\"Cada Port Corresponde a uma subnet\")\n         print(\"\\n\")\n-        print(self.router_ports[dpid])\n+        print(self.router_ports)\n \n     #Adcionar flows\n     def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n         ofproto = datapath.ofproto\n"
                },
                {
                    "date": 1655676238900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,11 +67,9 @@\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.router_ports = dict()\n-        self.ip_to_mac[1,2,3] = {}\n-        self.packet_queue[1,2,3] = {}\n-        self.router_ports[1,2,3] = {}\n+   \n \n \n \n     \"\"\"\n"
                },
                {
                    "date": 1655676425992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -161,12 +161,12 @@\n                 #Static routing handling\n                 if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                     self.ip_to_mac[dpid].setdefault(dpid, {})\n-                    if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n-                        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n-                        pkt_ethernet.src = self.router_ports[dpid][out_port]\n-                        pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n+                    if pkt_ipv4.dst in self.ip_to_mac[dpid][dpid].keys():\n+                        out_port = self.ip_to_port[dpid][dpid][pkt_ipv4.dst]\n+                        pkt_ethernet.src = self.router_ports[dpid][dpid][out_port]\n+                        pkt_ethernet.dst = self.ip_to_mac[dpid][dpid][pkt_ipv4.dst]\n                         self.send_packet(msg.datapath,out_port,pkt)\n                         return\n \n                     else:\n"
                },
                {
                    "date": 1655676648044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -225,9 +225,9 @@\n         dpid = msg.datapath.id\n \n         for router in self.router_ports_to_ip:\n             if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n-\n+                print(pkt_arp.dst_ip)\n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n                 port_mac = self.router_ports[router][port]\n                 print(port_mac)\n"
                },
                {
                    "date": 1655676699810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,12 +226,12 @@\n \n         for router in self.router_ports_to_ip:\n             if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n                 print(pkt_arp.dst_ip)\n+                time.sleep(10)\n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n                 port_mac = self.router_ports[router][port]\n-                print(port_mac)\n \n                 pkt = packet.Packet()\n                 pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                             dst=pkt_ethernet.src,\n"
                },
                {
                    "date": 1655676719041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n from ryu.lib.packet import packet_base\n from ryu.lib.packet import tcp\n from ryu.lib.packet import udp\n from ryu.ofproto import ether\n+import time\n \n ETHERNET = ethernet.ethernet.__name__\n IPV4 = ipv4.ipv4.__name__\n ARP = arp.arp.__name__\n"
                },
                {
                    "date": 1655676837716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,8 @@\n \n         for router in self.router_ports_to_ip:\n             if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n                 print(pkt_arp.dst_ip)\n-                time.sleep(10)\n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n                 port_mac = self.router_ports[router][port]\n \n"
                },
                {
                    "date": 1655676977922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,12 +162,12 @@\n                 #Static routing handling\n                 if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                     self.ip_to_mac[dpid].setdefault(dpid, {})\n-                    if pkt_ipv4.dst in self.ip_to_mac[dpid][dpid].keys():\n-                        out_port = self.ip_to_port[dpid][dpid][pkt_ipv4.dst]\n-                        pkt_ethernet.src = self.router_ports[dpid][dpid][out_port]\n-                        pkt_ethernet.dst = self.ip_to_mac[dpid][dpid][pkt_ipv4.dst]\n+                    if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n+                        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n+                        pkt_ethernet.src = self.router_ports[dpid][out_port]\n+                        pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n                         self.send_packet(msg.datapath,out_port,pkt)\n                         return\n \n                     else:\n"
                },
                {
                    "date": 1655677483848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,25 +47,28 @@\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n         self.ip_to_port = dict()\n         self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n-                              '10.0.4.1': 2, '10.0.5.1' : 3} \n+                              '10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n+                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n         \n         #Port1 -> Hosts\n         #Port2 -> R2-R1\n         #Port3 -> R2-R3\n-        self.ip_to_port[2] = {'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                              '10.0.4.2' : 2, '10.0.6.1' : 3}\n+        self.ip_to_port[2] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n+                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n+                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n         #Port1 -> Hosts\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n-        self.ip_to_port[3] = {'10.0.3.2': 1, '10.0.3.3': 1, '10.0.3.4': 1,\n-                              '10.0.5.2': 2, '10.0.6.2':3}\n+        self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n+                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n+                              '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n         \n         self.router_ports_to_ip = dict()\n-        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n-        self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n-        self.router_ports_to_ip[2] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n+        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.2', 3 : '10.0.3.1'}\n+        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 3 : '10.0.2.2', 1 : '10.0.3.2'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.router_ports = dict()\n"
                },
                {
                    "date": 1655677520239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,10 +65,10 @@\n                               '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n         \n         self.router_ports_to_ip = dict()\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n-        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.2', 3 : '10.0.3.1'}\n-        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 3 : '10.0.2.2', 1 : '10.0.3.2'}\n+        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.1', 3 : '10.0.3.1'}\n+        self.router_ports_to_ip[3] = {2 : '10.0.1.1', 3 : '10.0.2.1', 1 : '10.0.3.1'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.router_ports = dict()\n"
                },
                {
                    "date": 1655677615355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n             else:\n                 #Static routing handling\n                 if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n-                    self.ip_to_mac[dpid].setdefault(dpid, {})\n+                    self.ip_to_mac.setdefault(dpid, {})\n                     if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n                         out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                         pkt_ethernet.src = self.router_ports[dpid][out_port]\n                         pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n"
                },
                {
                    "date": 1655677648650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n                         self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n"
                },
                {
                    "date": 1655677733851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n         self.router_ports_to_ip[3] = {2 : '10.0.1.1', 3 : '10.0.2.1', 1 : '10.0.3.1'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n+        self.packet_queue[1,2,3] = dict()\n         self.router_ports = dict()\n    \n \n \n"
                },
                {
                    "date": 1655677749952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue.[dpid]setdefault(pkt_ipv4.dst,[])\n                         self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n"
                },
                {
                    "date": 1655677785171,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue.[dpid]setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue[dpid]setdefault(pkt_ipv4.dst,[])\n                         self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n"
                },
                {
                    "date": 1655677795611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue[dpid]setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n                         self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n"
                },
                {
                    "date": 1655677845841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,10 +175,10 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n-                        self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n+                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue[pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n \n"
                },
                {
                    "date": 1655678269530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,9 +227,10 @@\n     #Gerir arp requests\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n-\n+        print(\"msg, port, pkt_ethernet, pkt_arp\")\n+        print(str(msg) + \" \" + str(port) + \" \" + str(pkt_ethernet) + \" \" + str(pkt_arp))\n         for router in self.router_ports_to_ip:\n             if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n                 print(pkt_arp.dst_ip)\n                 self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n"
                },
                {
                    "date": 1655679095828,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,55 +229,55 @@\n         #ARP packet handling.\n         dpid = msg.datapath.id\n         print(\"msg, port, pkt_ethernet, pkt_arp\")\n         print(str(msg) + \" \" + str(port) + \" \" + str(pkt_ethernet) + \" \" + str(pkt_arp))\n-        for router in self.router_ports_to_ip:\n-            if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n-                print(pkt_arp.dst_ip)\n-                self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n+        \n+        if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n+            print(pkt_arp.dst_ip)\n+            self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n-                port_mac = self.router_ports[router][port]\n+            port_mac = self.router_ports[dpid][port]\n \n-                pkt = packet.Packet()\n-                pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n-                                            dst=pkt_ethernet.src,\n-                                            src=port_mac))\n-                pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n-                                    src_mac=port_mac,\n-                                    src_ip=pkt_arp.dst_ip,\n-                                    dst_mac=pkt_arp.src_mac,\n-                                    dst_ip=pkt_arp.src_ip))\n-                self.send_packet(msg.datapath, port, pkt)\n+            pkt = packet.Packet()\n+            pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n+                                        dst=pkt_ethernet.src,\n+                                        src=port_mac))\n+            pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n+                                src_mac=port_mac,\n+                                src_ip=pkt_arp.dst_ip,\n+                                dst_mac=pkt_arp.src_mac,\n+                                dst_ip=pkt_arp.src_ip))\n+            self.send_packet(msg.datapath, port, pkt)\n \n-                self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n+            self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n \n-                return\n-            elif pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REPLY:\n-                self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n-                self.ip_to_mac.setdefault(dpid, {})\n-                self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n+            return\n+        elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n+            self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n+            self.ip_to_mac.setdefault(dpid, {})\n+            self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n-                for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n-                    dpid = m.datapath.id        \n-                    pkt = packet.Packet(m.data)\n-                    pkt_eth = pkt.get_protocol(ethernet.ethernet)\n-                    pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n-                    out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n-                    pkt_eth.src = self.router_ports[dpid][out_port]\n-                    pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n-                    self.send_packet(msg.datapath,out_port,pkt)\n-                    self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n+            for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n+                dpid = m.datapath.id        \n+                pkt = packet.Packet(m.data)\n+                pkt_eth = pkt.get_protocol(ethernet.ethernet)\n+                pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n+                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n+                pkt_eth.src = self.router_ports[dpid][out_port]\n+                pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n+                self.send_packet(msg.datapath,out_port,pkt)\n+                self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n \n-    \n-                #cycle through all packets to this ip and forward them\n-                return\n-            else:\n-                self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n-                \n-                #Any other case pass\n-                return\n \n+            #cycle through all packets to this ip and forward them\n+            return\n+        else:\n+            self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n+            \n+            #Any other case pass\n+            return\n \n+\n     def handle_icmp(self, msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp):\n         # Send ICMP echo reply.\n \n         dpid = msg.datapath.id\n"
                },
                {
                    "date": 1655679223189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -227,13 +227,13 @@\n     #Gerir arp requests\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n-        print(\"msg, port, pkt_ethernet, pkt_arp\")\n-        print(str(msg) + \" \" + str(port) + \" \" + str(pkt_ethernet) + \" \" + str(pkt_arp))\n+        print(pkt_arp.dst_ip)\n+        print(pkt_arp.src_ip)\n         \n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n-            print(pkt_arp.dst_ip)\n+            \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n             port_mac = self.router_ports[dpid][port]\n \n"
                },
                {
                    "date": 1655679262270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -229,8 +229,9 @@\n         #ARP packet handling.\n         dpid = msg.datapath.id\n         print(pkt_arp.dst_ip)\n         print(pkt_arp.src_ip)\n+        print(dpid)\n         \n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n             \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n"
                },
                {
                    "date": 1655679299939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,8 +230,9 @@\n         dpid = msg.datapath.id\n         print(pkt_arp.dst_ip)\n         print(pkt_arp.src_ip)\n         print(dpid)\n+        print(pkt_arp.opcode)\n         \n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n             \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n"
                },
                {
                    "date": 1655679394573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -231,9 +231,11 @@\n         print(pkt_arp.dst_ip)\n         print(pkt_arp.src_ip)\n         print(dpid)\n         print(pkt_arp.opcode)\n+        print(self.router_ports_to_ip[dpid].values())\n         \n+        \n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n             \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n"
                },
                {
                    "date": 1655681002912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,23 +47,23 @@\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n         self.ip_to_port = dict()\n         self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n-                              '10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n-                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n+                              '10.0.4.1' : 2,\n+                              '10.0.5.1' : 3}\n         \n         #Port1 -> Hosts\n         #Port2 -> R2-R1\n         #Port3 -> R2-R3\n-        self.ip_to_port[2] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n-                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n+        self.ip_to_port[2] = {'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n+                              '10.0.4.2':2,\n+                              '10.0.6.1' : 3}\n         #Port1 -> Hosts\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n-        self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n-                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n-                              '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n+        self.ip_to_port[3] = {'10.0.1.2' :1, '10.0.2.1' : 1, '10.0.2.2' : 1,\n+                              '10.0.5.2' : 2,\n+                              '10.0.6.2' : 3}\n         \n         self.router_ports_to_ip = dict()\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n         self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.1', 3 : '10.0.3.1'}\n"
                },
                {
                    "date": 1655681106075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n                               '10.0.5.2' : 2,\n                               '10.0.6.2' : 3}\n         \n         self.router_ports_to_ip = dict()\n-        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n-        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.1', 3 : '10.0.3.1'}\n-        self.router_ports_to_ip[3] = {2 : '10.0.1.1', 3 : '10.0.2.1', 1 : '10.0.3.1'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.2', 3 : '10.0.5.2'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.1', 3 : '10.0.6.2'}\n+        self.router_ports_to_ip[3] = {1 : '10.0.3.1', 2 : '10.0.5.1', 3 : '10.0.6.1'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.packet_queue[1,2,3] = dict()\n"
                },
                {
                    "date": 1655681139638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,11 +64,11 @@\n                               '10.0.5.2' : 2,\n                               '10.0.6.2' : 3}\n         \n         self.router_ports_to_ip = dict()\n-        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.2', 3 : '10.0.5.2'}\n-        self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.1', 3 : '10.0.6.2'}\n-        self.router_ports_to_ip[3] = {1 : '10.0.3.1', 2 : '10.0.5.1', 3 : '10.0.6.1'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n+        self.router_ports_to_ip[3] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.packet_queue[1,2,3] = dict()\n"
                },
                {
                    "date": 1655681192444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,28 +47,28 @@\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n         self.ip_to_port = dict()\n         self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n-                              '10.0.4.1' : 2,\n-                              '10.0.5.1' : 3}\n+                              '10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n+                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n         \n         #Port1 -> Hosts\n         #Port2 -> R2-R1\n         #Port3 -> R2-R3\n-        self.ip_to_port[2] = {'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                              '10.0.4.2':2,\n-                              '10.0.6.1' : 3}\n+        self.ip_to_port[2] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n+                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n+                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n         #Port1 -> Hosts\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n-        self.ip_to_port[3] = {'10.0.1.2' :1, '10.0.2.1' : 1, '10.0.2.2' : 1,\n-                              '10.0.5.2' : 2,\n-                              '10.0.6.2' : 3}\n+        self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n+                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n+                              '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n         \n         self.router_ports_to_ip = dict()\n-        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.4.1', 3 : '10.0.5.1'}\n-        self.router_ports_to_ip[2] = {1 : '10.0.2.1', 2 : '10.0.4.2', 3 : '10.0.6.1'}\n-        self.router_ports_to_ip[3] = {1 : '10.0.3.1', 2 : '10.0.5.2', 3 : '10.0.6.2'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n+        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.1', 3 : '10.0.3.1'}\n+        self.router_ports_to_ip[3] = {2 : '10.0.1.1', 3 : '10.0.2.1', 1 : '10.0.3.1'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.packet_queue[1,2,3] = dict()\n@@ -231,9 +231,8 @@\n         print(pkt_arp.dst_ip)\n         print(pkt_arp.src_ip)\n         print(dpid)\n         print(pkt_arp.opcode)\n-        print(self.router_ports_to_ip[dpid].values())\n         \n         \n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n             \n"
                },
                {
                    "date": 1655681297411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,11 +230,13 @@\n         dpid = msg.datapath.id\n         print(pkt_arp.dst_ip)\n         print(pkt_arp.src_ip)\n         print(dpid)\n-        print(pkt_arp.opcode)\n+\n         \n+        print(self.router_ports_to_ip[dpid])\n         \n+        \n         if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n             \n             self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n"
                },
                {
                    "date": 1655681730485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         #Port1 -> Hosts\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n-                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n+                              '10.0.2.2' : 3, '1 0.0.2.3' : 3, '10.0.2.4' : 3,\n                               '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n         \n         self.router_ports_to_ip = dict()\n         self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n"
                },
                {
                    "date": 1655683700567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,19 +60,18 @@\n         #Port1 -> Hosts\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n-                              '10.0.2.2' : 3, '1 0.0.2.3' : 3, '10.0.2.4' : 3,\n+                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n                               '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n         \n         self.router_ports_to_ip = dict()\n-        self.router_ports_to_ip[1] = {1 : '10.0.1.1', 2 : '10.0.2.1', 3 : '10.0.3.1'}\n-        self.router_ports_to_ip[2] = {2 : '10.0.1.1', 1 : '10.0.2.1', 3 : '10.0.3.1'}\n-        self.router_ports_to_ip[3] = {2 : '10.0.1.1', 3 : '10.0.2.1', 1 : '10.0.3.1'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.4.1', 2 : '10.0.6.2', 3 : '10.0.1.20'}\n+        self.router_ports_to_ip[2] = {2 : '10.0.4.2', 1 : '10.0.5.1', 3 : '10.0.2.20'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.5.1', 2 : '10.0.6.1', 3 : '10.0.3.20'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n-        self.packet_queue[1,2,3] = dict()\n         self.router_ports = dict()\n    \n \n \n@@ -165,9 +164,9 @@\n             else:\n                 #Static routing handling\n                 if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n-                    self.ip_to_mac.setdefault(dpid, {})\n+                    self.ip_to_mac[dpid].setdefault(dpid, {})\n                     if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n                         out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                         pkt_ethernet.src = self.router_ports[dpid][out_port]\n                         pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n@@ -175,10 +174,10 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n-                        self.packet_queue[pkt_ipv4.dst].append(msg)\n+                        self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n \n@@ -227,62 +226,56 @@\n     #Gerir arp requests\n     def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n         #ARP packet handling.\n         dpid = msg.datapath.id\n-        print(pkt_arp.dst_ip)\n-        print(pkt_arp.src_ip)\n-        print(dpid)\n \n-        \n-        print(self.router_ports_to_ip[dpid])\n-        \n-        \n-        if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n-            \n-            self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n+        for router in self.router_ports_to_ip:\n+            if pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n+                print(pkt_arp.dst_ip)\n+                self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n \n-            port_mac = self.router_ports[dpid][port]\n+                port_mac = self.router_ports[router][port]\n \n-            pkt = packet.Packet()\n-            pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n-                                        dst=pkt_ethernet.src,\n-                                        src=port_mac))\n-            pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n-                                src_mac=port_mac,\n-                                src_ip=pkt_arp.dst_ip,\n-                                dst_mac=pkt_arp.src_mac,\n-                                dst_ip=pkt_arp.src_ip))\n-            self.send_packet(msg.datapath, port, pkt)\n+                pkt = packet.Packet()\n+                pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n+                                            dst=pkt_ethernet.src,\n+                                            src=port_mac))\n+                pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n+                                    src_mac=port_mac,\n+                                    src_ip=pkt_arp.dst_ip,\n+                                    dst_mac=pkt_arp.src_mac,\n+                                    dst_ip=pkt_arp.src_ip))\n+                self.send_packet(msg.datapath, port, pkt)\n \n-            self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n+                self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n \n-            return\n-        elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n-            self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n-            self.ip_to_mac.setdefault(dpid, {})\n-            self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n+                return\n+            elif pkt_arp.dst_ip in self.router_ports_to_ip[router].values() and pkt_arp.opcode == arp.ARP_REPLY:\n+                self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n+                self.ip_to_mac.setdefault(dpid, {})\n+                self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n \n-            for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n-                dpid = m.datapath.id        \n-                pkt = packet.Packet(m.data)\n-                pkt_eth = pkt.get_protocol(ethernet.ethernet)\n-                pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n-                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n-                pkt_eth.src = self.router_ports[dpid][out_port]\n-                pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n-                self.send_packet(msg.datapath,out_port,pkt)\n-                self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n+                for m in self.packet_queue[dpid][pkt_arp.src_ip]:\n+                    dpid = m.datapath.id        \n+                    pkt = packet.Packet(m.data)\n+                    pkt_eth = pkt.get_protocol(ethernet.ethernet)\n+                    pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n+                    out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n+                    pkt_eth.src = self.router_ports[dpid][out_port]\n+                    pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n+                    self.send_packet(msg.datapath,out_port,pkt)\n+                    self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n \n+    \n+                #cycle through all packets to this ip and forward them\n+                return\n+            else:\n+                self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n+                \n+                #Any other case pass\n+                return\n \n-            #cycle through all packets to this ip and forward them\n-            return\n-        else:\n-            self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n-            \n-            #Any other case pass\n-            return\n \n-\n     def handle_icmp(self, msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp):\n         # Send ICMP echo reply.\n \n         dpid = msg.datapath.id\n"
                },
                {
                    "date": 1655684024959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,29 +46,29 @@\n         #Port1 -> Hosts\n         #Port2 -> R1-R2\n         #Port3 -> R1-R3\n         self.ip_to_port = dict()\n-        self.ip_to_port[1] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n-                              '10.0.2.2' : 2, '10.0.2.3' : 2, '10.0.2.4' : 2,\n-                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n+        self.ip_to_port[1] = {'10.0.1.2' : 3, '10.0.1.3' : 3, '10.0.1.4' : 3,\n+                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n+                              '10.0.3.2' : 2, '10.0.3.3' : 2, '10.0.3.4' : 2,}\n         \n         #Port1 -> Hosts\n         #Port2 -> R2-R1\n         #Port3 -> R2-R3\n-        self.ip_to_port[2] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n-                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n+        self.ip_to_port[2] = {'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1,\n+                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n+                              '10.0.3.2' : 2, '10.0.3.3' : 2, '10.0.3.4' : 2,}\n         #Port1 -> Hosts\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n-                              '10.0.2.2' : 3, '10.0.2.3' : 3, '10.0.2.4' : 3,\n+                              '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n                               '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n         \n         self.router_ports_to_ip = dict()\n-        self.router_ports_to_ip[1] = {1 : '10.0.4.1', 2 : '10.0.6.2', 3 : '10.0.1.20'}\n-        self.router_ports_to_ip[2] = {2 : '10.0.4.2', 1 : '10.0.5.1', 3 : '10.0.2.20'}\n-        self.router_ports_to_ip[2] = {1 : '10.0.5.1', 2 : '10.0.6.1', 3 : '10.0.3.20'}\n+        self.router_ports_to_ip[1] = {1 : '10.0.4.1', 2 : '10.0.6.2', 3 : '10.0.1.1'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.4.2', 2 : '10.0.5.1', 3 : '10.0.2.1'}\n+        self.router_ports_to_ip[2] = {1 : '10.0.5.2', 2 : '10.0.6.1', 3 : '10.0.3.1'}\n         \n         self.ip_to_mac = dict()\n         self.packet_queue = dict()\n         self.router_ports = dict()\n"
                },
                {
                    "date": 1655684068200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n         #Port2 -> R3-R1\n         #Port3 -> R3-R2\n         self.ip_to_port[3] = {'10.0.1.2' : 2, '10.0.1.3' : 2, '10.0.1.4' : 2,\n                               '10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1,\n-                              '10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1,}\n+                              '10.0.3.2' : 3, '10.0.3.3' : 3, '10.0.3.4' : 3,}\n         \n         self.router_ports_to_ip = dict()\n         self.router_ports_to_ip[1] = {1 : '10.0.4.1', 2 : '10.0.6.2', 3 : '10.0.1.1'}\n         self.router_ports_to_ip[2] = {1 : '10.0.4.2', 2 : '10.0.5.1', 3 : '10.0.2.1'}\n"
                },
                {
                    "date": 1655684100497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,9 +164,9 @@\n             else:\n                 #Static routing handling\n                 if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                     self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n-                    self.ip_to_mac[dpid].setdefault(dpid, {})\n+                    self.ip_to_mac.setdefault(dpid, {})\n                     if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n                         out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                         pkt_ethernet.src = self.router_ports[dpid][out_port]\n                         pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n"
                },
                {
                    "date": 1655684139269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n                         return\n \n                     else:\n                         #Send ARP Request\n-                        self.packet_queue[dpid].setdefault(pkt_ipv4.dst,[])\n+                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n                         self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n"
                },
                {
                    "date": 1655684165913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -175,9 +175,9 @@\n \n                     else:\n                         #Send ARP Request\n                         self.packet_queue.setdefault(pkt_ipv4.dst,[])\n-                        self.packet_queue[dpid][pkt_ipv4.dst].append(msg)\n+                        self.packet_queue[pkt_ipv4.dst].append(msg)\n                         self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                         self.send_arp_request(msg, pkt_ipv4)\n                         return\n \n"
                }
            ],
            "date": 1655641622339,
            "name": "Commit-0",
            "content": "from email import parser\nfrom ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ether_types\nfrom ryu.lib.packet import packet_base\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import arp\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import icmp\nfrom ryu.lib.packet import ipv4\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import packet_base\nfrom ryu.lib.packet import tcp\nfrom ryu.lib.packet import udp\nfrom ryu.ofproto import ether\nimport time\nETHERNET = ethernet.ethernet.__name__\nIPV4 = ipv4.ipv4.__name__\nARP = arp.arp.__name__\nICMP = icmp.icmp.__name__\nTCP = tcp.tcp.__name__\nUDP = udp.udp.__name__\n\n\n\n\nclass SwitchL3(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    \"\"\"Contrutor para a classe com as seguintes tabelas:\n        - ip_to_mac: dicionario de ip para mac\n        - ip_to_port: dicionario de ip para porta (L3)\n        - router_ports: dicionario de porta para ip \n        - router_ports_to_ip: dicionario de porta para ip, atribuindo o default route\n        - packet_queue: dicionario fila de pacotes arp\n    \"\"\"\n\n\n    def __init__(self, *args, **kwargs):\n        super(SwitchL3, self).__init__(*args, **kwargs)\n        self.ip_to_mac = {}\n        self.ip_to_mac = {}\n        self.ip_to_port = {  \n                            1:{'10.0.1.2' : 1, '10.0.1.3' : 1, '10.0.1.4' : 1, '20.0.0.2' : 2, '30.0.0.2' :3},\n                            2:{'10.0.2.2' : 1, '10.0.2.3' : 1, '10.0.2.4' : 1, '20.0.0.1' : 2, '40.0.0.2':3},\n                            3:{'10.0.3.2' : 1, '10.0.3.3' : 1, '10.0.3.4' : 1, '30.0.0.1' : 2, '40.0.0.2':3}\n                        }\n\n        self.router_ports = {}\n        self.router_ports_to_ip = {\n                                    1 :{1:'10.0.1.254', 2:'224.0.0.10', 3:'224.0.0.10'},\n                                    2 :{1:'10.0.2.254', 2:'224.0.0.10', 3:'224.0.0.10'}, \n                                    3 :{1:'10.0.3.254', 2:'224.0.0.10', 3:'224.0.0.10'}\n                                  }\n        self.packet_queue = {}\n \n        \n\n\n    \"\"\"\n    Função responsável pelo evento correspondente ao ennvio das funcionaliades presentes no switch para o controlado\n    \"\"\"\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER, ofproto.OFPCML_NO_BUFFER)]\n\n        self.add_flow(datapath, 0, match, actions)\n\n        match = parser.OFPMatch(eth_type = ether_types.ETH_TYPE_IPV6)\n        actions = []\n\n        self.add_flow(datapath, 1, match, actions)\n        self.port_desc(datapath)\n\n    #Utility Function\n    def port_desc(self, datapath):\n        ofparser = datapath.ofproto_parser\n\n        req = ofparser.OFPPortDescStatsRequest(datapath,0)\n        datapath.send_msg(req)\n\n    #Utility Function\n    @set_ev_cls(ofp_event.EventOFPPortDescStatsReply, MAIN_DISPATCHER)\n    def port_desc_stats_reply_handle(self,ev):\n\n        dpid = ev.msg.datapath.id\n        self.router_ports.setdefault(dpid, {})\n        for p in ev.msg.body:\n            self.router_ports[dpid].update({ p.port_no: p.hw_addr})\n        \n        print(\"L3 Switches Conectado dpid:\",dpid)\n        for p in self.router_ports[dpid].keys():\n            if p < 10:\n                print(f\"Porta {p} tem endereço MAC: {self.router_ports[dpid][p]}\")\n                print(\"Cada Port Corresponde a uma subnet\")\n        print(\"\\n\")\n\n    #Adcionar flows\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n \n    #Gestão de pacotes\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def packet_in_handler(self, ev):\n        msg = ev.msg\n        dpid = msg.datapath.id        \n        port = msg.match['in_port']\n        pkt = packet.Packet(msg.data)\n\n        #self.logger.info(\"\\npacket-in %s\" % (pkt,))\n\n        pkt_ethernet = pkt.get_protocol(ethernet.ethernet)\n        if not pkt_ethernet:\n            return\n        pkt_arp = pkt.get_protocol(arp.arp)\n        if pkt_arp:\n            #ARP handling\n            self.handle_arp(msg, port, pkt_ethernet, pkt_arp)\n            return\n        pkt_ipv4 = pkt.get_protocol(ipv4.ipv4)\n        if pkt_ipv4:\n    \n       \n            if pkt_ipv4.dst in self.router_ports_to_ip[dpid].values():\n                pkt_icmp = pkt.get_protocol(icmp.icmp)\n                if pkt_icmp:\n                    self.handle_icmp(msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp)\n                    return\n            else:\n                #Static routing handling\n                if pkt_ipv4.dst in self.ip_to_port[dpid].keys():\n                    self.logger.info(\"\\nPacket received by router %s from %s to %s \", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                    self.ip_to_mac.setdefault(dpid, {})\n                    if pkt_ipv4.dst in self.ip_to_mac[dpid].keys():\n                        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n                        pkt_ethernet.src = self.router_ports[dpid][out_port]\n                        pkt_ethernet.dst = self.ip_to_mac[dpid][pkt_ipv4.dst]\n                        self.send_packet(msg.datapath,out_port,pkt)\n                        return\n\n                    else:\n                        #Send ARP Request\n                        self.packet_queue.setdefault(pkt_ipv4.dst,[])\n                        self.packet_queue[pkt_ipv4.dst].append(msg)\n                        self.logger.info(\"\\nRouter %s doesn't know MAC of %s adding packet to queue\", dpid, pkt_ipv4.dst)\n                        self.send_arp_request(msg, pkt_ipv4)\n                        return\n\n                else:\n                    self.logger.info(\"\\nPacket received by router %s from %s to %s (unknown destination)\", dpid, pkt_ipv4.src, pkt_ipv4.dst)\n                    print(self.router_ports_to_ip[dpid])\n                    time.sleep(2)\n                    self.send_icmp_unreachable(msg, port, pkt_ethernet, pkt_ipv4)\n                    #Send ICMP network unreachable\n                   \n\n    #Enviar arp request\n    def send_arp_request(self, msg, pkt_ipv4):\n        dpid = msg.datapath.id\n        out_port = self.ip_to_port[dpid][pkt_ipv4.dst]\n        src_mac = self.router_ports[msg.datapath.id][out_port]\n        src_ip = self.router_ports_to_ip[dpid][out_port]\n\n\n        pkt = packet.Packet()\n        pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                           dst='ff:ff:ff:ff:ff:ff',\n                                           src=src_mac))\n        pkt.add_protocol(arp.arp(opcode=arp.ARP_REQUEST,\n                                 src_mac=src_mac,\n                                 src_ip=src_ip,\n                                 dst_mac='ff:ff:ff:ff:ff:ff',\n                                 dst_ip=pkt_ipv4.dst))\n\n        self.send_packet(msg.datapath,out_port,pkt)\n\n        self.logger.info(\"\\nRouter %s sending ARP Request from port %s to learn MAC of %s\", msg.datapath.id, out_port, pkt_ipv4.dst)\n\n    #Enviar pacote\n    def send_packet(self, datapath, port, pkt):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        pkt.serialize()\n        data = pkt.data\n        actions = [parser.OFPActionOutput(port=port)]\n        out = parser.OFPPacketOut(datapath=datapath,\n                                  buffer_id=ofproto.OFP_NO_BUFFER,\n                                  in_port=ofproto.OFPP_CONTROLLER,\n                                  actions=actions,\n                                  data=data)\n        datapath.send_msg(out)\n\n    #Gerir arp requests\n    def handle_arp(self, msg, port, pkt_ethernet, pkt_arp):\n        #ARP packet handling.\n        dpid = msg.datapath.id\n        print(self.router_ports_to_ip(dpid).values())\n        time.sleep(2)\n        if pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REQUEST:\n\n            self.logger.info(\"\\nARP Request received by router %s from %s in port %s \", dpid, pkt_arp.src_ip, port)\n\n            port_mac = self.router_ports[dpid][port]\n\n            pkt = packet.Packet()\n            pkt.add_protocol(ethernet.ethernet(ethertype=ether.ETH_TYPE_ARP,\n                                           dst=pkt_ethernet.src,\n                                           src=port_mac))\n            pkt.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                 src_mac=port_mac,\n                                 src_ip=pkt_arp.dst_ip,\n                                 dst_mac=pkt_arp.src_mac,\n                                 dst_ip=pkt_arp.src_ip))\n            self.send_packet(msg.datapath, port, pkt)\n\n            self.logger.info(\"ARP Reply sent by router %s from port %s with MAC %s to %s\", dpid, port, port_mac, pkt_arp.src_ip)\n\n            return\n        elif pkt_arp.dst_ip in self.router_ports_to_ip[dpid].values() and pkt_arp.opcode == arp.ARP_REPLY:\n            self.logger.info(\"\\nARP Reply received by router %s from %s with MAC %s\", dpid, pkt_arp.src_ip, pkt_arp.src_mac)\n            self.ip_to_mac.setdefault(dpid, {})\n            self.ip_to_mac[dpid][pkt_arp.src_ip] = pkt_arp.src_mac\n\n            for m in self.packet_queue[pkt_arp.src_ip]:\n                dpid = m.datapath.id        \n                pkt = packet.Packet(m.data)\n                pkt_eth = pkt.get_protocol(ethernet.ethernet)\n                pkt_v4 = pkt.get_protocol(ipv4.ipv4)\n                out_port = self.ip_to_port[dpid][pkt_arp.src_ip]\n                pkt_eth.src = self.router_ports[dpid][out_port]\n                pkt_eth.dst = self.ip_to_mac[dpid][pkt_arp.src_ip]\n                self.send_packet(msg.datapath,out_port,pkt)\n                self.logger.info(\"Router %s sent queued packet from %s to %s\", dpid, pkt_v4.src, pkt_v4.dst)\n\n  \n            #cycle through all packets to this ip and forward them\n            return\n        else:\n            print(print)\n            self.logger.info(\"\\nARP Packet dropped router %s, %s not an interface ip\", dpid, pkt_arp.dst_ip)\n            \n            #Any other case pass\n            return\n\n\n    def handle_icmp(self, msg, port, pkt_ethernet, pkt_ipv4, pkt_icmp):\n        # Send ICMP echo reply.\n\n        dpid = msg.datapath.id\n        src_ip = pkt_ipv4.src\n        self.logger.info('\\nICMP echo request received by router %s port %s from %s to %s.', dpid, port, src_ip, pkt_ipv4.dst)\n        pkt = packet.Packet()\n        pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                           dst=pkt_ethernet.src,\n                                           src=self.router_ports[dpid][port]))\n        pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n                                   src=self.router_ports_to_ip[dpid][port],\n                                   proto=pkt_ipv4.proto))\n        pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_ECHO_REPLY,\n                                   code=icmp.ICMP_ECHO_REPLY_CODE,\n                                   csum=0,\n                                   data=pkt_icmp.data))\n        self.send_packet(msg.datapath, port, pkt)\n        self.logger.info('Send ICMP echo reply to [%s].', src_ip)\n        \n        match = parser.OFPMatch(in_port = port,\n                                eth_type=0x0800,\n                                ip_proto=pkt_ipv4.proto,\n                                ipv4_src=pkt_ipv4.src,\n                                ipv4_dst=pkt_ipv4.dst)\n        \n        #Inversao de endereços IPv4 e MAC para resopnder, e o tipo de código de ICMP alterados para reply.\n        set_csum = parser.OFPActionSetField(ipv4_csum=0)\n        set_eth_src = parser.OFPActionSetField(eth_src=pkt_ethernet.src)\n        set_eth_dst = parser.OFPActionSetField(eth_src=pkt_ethernet.src)\n        set_ip_src = parser.OFPActionSetField(ipv4_src=pkt_ipv4.src)\n        set_ip_dst = parser.OFPActionSetField(ipv4_dst=pkt_ipv4.dst)\n        set_icmp_type = parser.OFPActionSetField(icmpv4_type=0)\n        set_icmp_code = parser.OFPActionSetField(icmpv4_code=0)\n        actions = [set_csum, set_eth_src, set_eth_dst, set_ip_src, set_ip_dst, set_icmp_type, set_icmp_code, parser.OFPActionOutput(port)]\n        \n        self.add_flow(msg.datapath, 2, match, actions)\n        out = msg.ofproto_parser.OFPPacketOut(datapath=msg.datapath,\n                                              buffer_id=0xffffffff,\n                                              in_port=msg.ofproto.OFPP_CONTROLLER,\n                                              actions=actions,\n                                              data=packet)\n        msg.datapath.send_msg(out)\n        \n        \n        self.logger.info(\"Entrada na flow table adicionada!\")\n        \n        \n    def send_icmp_unreachable(self, msg, port, pkt_ethernet, pkt_ipv4):\n        dpid = msg.datapath.id\n        port_mac = self.router_ports[msg.datapath.id][port]\n\n        offset = ethernet.ethernet._MIN_LEN\n        end_of_data = offset + len(pkt_ipv4) + 128\n        ip_datagram = bytearray()\n        ip_datagram += msg.data[offset:end_of_data]\n        data_len = int(len(ip_datagram) / 4)\n        length_modulus = int(len(ip_datagram) % 4)\n        if length_modulus:\n            data_len += 1\n            ip_datagram += bytearray([0] * (4 - length_modulus))\n\n        icmp_data = icmp.dest_unreach(data_len=data_len, data=ip_datagram)\n\n        pkt = packet.Packet()\n        pkt.add_protocol(ethernet.ethernet(ethertype=pkt_ethernet.ethertype,\n                                            dst=pkt_ethernet.src,\n                                            src=port_mac))\n        pkt.add_protocol(ipv4.ipv4(dst=pkt_ipv4.src,\n                                    src=self.router_ports_to_ip[dpid][port],\n                                    proto=pkt_ipv4.proto))\n        pkt.add_protocol(icmp.icmp(type_=icmp.ICMP_DEST_UNREACH,\n                                    code=icmp.ICMP_HOST_UNREACH_CODE,\n                                    csum=0,\n                                    data=icmp_data))\n        self.send_packet(msg.datapath, port, pkt)\n\n        self.logger.info(\"Router %s sending ICMP Destination Unreachable to %s\", msg.datapath.id, pkt_ipv4.src)\n\n"
        }
    ]
}