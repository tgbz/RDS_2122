{
    "sourceFile": "ex2controller.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1652277280887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652277303817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from ryu.ofproto import ofproto_v1_3\n from ryu.lib.packet import packet\n from ryu.lib.packet import ethernet\n from ryu.lib.packet import ether_types\n+from ryu.lib.packet import ipv4\n \n \n class SimpleSwitchL2(app_manager.RyuApp):\n     OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n"
                },
                {
                    "date": 1652277492655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,16 @@\n         src = eth.src\n \n         dpid = datapath.id\n         self.mac_to_port.setdefault(dpid, {})\n+        \n         self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n+        \n+        \n+        #aprender o mac address para evitar Flood Nex time\n         self.mac_to_port[dpid][src] = in_port\n+        print(\"MAC address adicionado à tabela, estado actual da tabela:\")\n+        print(self.mac_to_port)\n \n         if dst in self.mac_to_port[dpid]:\n             out_port = self.mac_to_port[dpid][dst]\n         else:\n"
                },
                {
                    "date": 1652277526193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,27 +72,37 @@\n         self.mac_to_port[dpid][src] = in_port\n         print(\"MAC address adicionado à tabela, estado actual da tabela:\")\n         print(self.mac_to_port)\n \n+\n         if dst in self.mac_to_port[dpid]:\n             out_port = self.mac_to_port[dpid][dst]\n         else:\n             out_port = ofproto.OFPP_FLOOD\n \n         actions = [parser.OFPActionOutput(out_port)]\n \n         if out_port != ofproto.OFPP_FLOOD:\n-            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)\n-            if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n-                self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n-                return\n-            else:\n-                self.add_flow(datapath, 1, match, actions)\n+  # check IP Protocol and create a match for IP\n+            if eth.ethertype == ether_types.ETH_TYPE_IP:\n+                ip = pkt.get_protocol(ipv4.ipv4)\n+                srcip = ip.src\n+                dstip = ip.dst\n+                match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n+                                        ipv4_src=srcip,\n+                                        ipv4_dst=dstip\n+                                        )\n+                # verify if we have a valid buffer_id, if yes avoid to send both\n+                # flow_mod & packet_out\n+                if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n+                    self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n+                    return\n+                else:\n+                    self.add_flow(datapath, 1, match, actions)\n         data = None\n         if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n             data = msg.data\n \n         out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                   in_port=in_port, actions=actions, data=data)\n         datapath.send_msg(out)\n-\n     \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652278241971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n \n     def __init__(self, *args, **kwargs):\n         super(SimpleSwitchL2, self).__init__(*args, **kwargs)\n         self.mac_to_port = {}\n+        self.arp_table = {}\n \n     @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n     def switch_features_handler(self, ev):\n         datapath = ev.msg.datapath\n@@ -86,8 +87,9 @@\n             if eth.ethertype == ether_types.ETH_TYPE_IP:\n                 ip = pkt.get_protocol(ipv4.ipv4)\n                 srcip = ip.src\n                 dstip = ip.dst\n+                #ADD\n                 match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n                                         ipv4_src=srcip,\n                                         ipv4_dst=dstip\n                                         )\n"
                },
                {
                    "date": 1652278322208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,10 @@\n             if eth.ethertype == ether_types.ETH_TYPE_IP:\n                 ip = pkt.get_protocol(ipv4.ipv4)\n                 srcip = ip.src\n                 dstip = ip.dst\n-                #ADD\n+                self.arp_table[src] = ip.src\n+                self.arp_table[dst] = ip.dst\n                 match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n                                         ipv4_src=srcip,\n                                         ipv4_dst=dstip\n                                         )\n"
                },
                {
                    "date": 1652278338859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,10 @@\n                 srcip = ip.src\n                 dstip = ip.dst\n                 self.arp_table[src] = ip.src\n                 self.arp_table[dst] = ip.dst\n+                print(\"Estado atual da tabela de arp\")\n+                print(self.arp_table)\n                 match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n                                         ipv4_src=srcip,\n                                         ipv4_dst=dstip\n                                         )\n"
                },
                {
                    "date": 1652278662575,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,10 @@\n from ryu.lib.packet import packet\n from ryu.lib.packet import ethernet\n from ryu.lib.packet import ether_types\n from ryu.lib.packet import ipv4\n+from ryu.lib.packet import in_proto\n \n-\n class SimpleSwitchL2(app_manager.RyuApp):\n     OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n \n     def __init__(self, *args, **kwargs):\n@@ -87,18 +87,21 @@\n             if eth.ethertype == ether_types.ETH_TYPE_IP:\n                 ip = pkt.get_protocol(ipv4.ipv4)\n                 srcip = ip.src\n                 dstip = ip.dst\n+                protocol = ip.proto\n                 self.arp_table[src] = ip.src\n                 self.arp_table[dst] = ip.dst\n                 print(\"Estado atual da tabela de arp\")\n                 print(self.arp_table)\n-                match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n-                                        ipv4_src=srcip,\n-                                        ipv4_dst=dstip\n-                                        )\n-                # verify if we have a valid buffer_id, if yes avoid to send both\n-                # flow_mod & packet_out\n+                \n+                if protocol == in_proto.IPPROTO_ICMP:\n+                    match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n+                                            ipv4_src=srcip,\n+                                            ipv4_dst=dstip\n+                                            )\n+                    # verify if we have a valid buffer_id, if yes avoid to send both\n+                    # flow_mod & packet_out\n                 if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                     self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                     return\n                 else:\n"
                },
                {
                    "date": 1652278683545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,8 +94,9 @@\n                 print(\"Estado atual da tabela de arp\")\n                 print(self.arp_table)\n                 \n                 if protocol == in_proto.IPPROTO_ICMP:\n+                    print(\"Tráfego ICMP detactado\")\n                     match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n                                             ipv4_src=srcip,\n                                             ipv4_dst=dstip\n                                             )\n"
                },
                {
                    "date": 1652278954994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,15 @@\n             mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                     match=match, instructions=inst)\n         datapath.send_msg(mod)\n \n+    def drop_pkt(self, datapath, in_port):\n+        parser = datapath.ofproto_parser\n+        match = parser.OFPMatch(in_port=in_port)\n+        actions = []\n+        self.add_flow(datapath, match, actions, 0, 1)\n+\n+\n     @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n     def _packet_in_handler(self, ev):\n         \n         if ev.msg.msg_len < ev.msg.total_len:\n"
                }
            ],
            "date": 1652277280886,
            "name": "Commit-0",
            "content": "from ryu.base import app_manager #classe base RYU\nfrom ryu.controller import ofp_event #ryu fica à escuta de eventos na rede, e quando esses eventos ocorrem, estes são geridos.\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER #CONFIG_DISPATCHER quando o switch informa ao controlador as funcionalidades presentes no mesmo. MAIN_DISPATCHER tudo o que acontece posteriormente\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\n\n\nclass SimpleSwitchL2(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(SimpleSwitchL2, self).__init__(*args, **kwargs)\n        self.mac_to_port = {}\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        \n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        \n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n        self.mac_to_port[dpid][src] = in_port\n\n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n\n        actions = [parser.OFPActionOutput(out_port)]\n\n        if out_port != ofproto.OFPP_FLOOD:\n            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)\n            if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                return\n            else:\n                self.add_flow(datapath, 1, match, actions)\n        data = None\n        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n            data = msg.data\n\n        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                  in_port=in_port, actions=actions, data=data)\n        datapath.send_msg(out)\n\n    "
        }
    ]
}