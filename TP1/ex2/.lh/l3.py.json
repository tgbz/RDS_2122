{
    "sourceFile": "l3.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1652276072845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1652276072845,
            "name": "Commit-0",
            "content": "from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, DEAD_DISPATCHER\nfrom ryu.controller.handler import MAIN_DISPATCHER, HANDSHAKE_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.ofproto import ether\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\nfrom ryu.lib.packet import arp\nfrom ryu.lib.packet import ipv4\nfrom ryu.lib.packet import ipv6\nfrom ryu import utils\n\n\nclass l3(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n    \n    def __init__(self, *args, **kwargs):\n        super(l3, self).__init__(*args, **kwargs)\n        self.mac_to_port = {}\n    ''' \n    - Gestor de eventos respnosável por novos switches, este gestor de eventos especifica as acções a serem tomadas para um evento em particular tal como um pacote a entrar. O decorador set_ev_cls menciona que a classe do evento por trás da mensagem a entrar e o status do OpenFlow switch\n    '''   \n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        \n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        dpid = datapath.id\n        #Instalação da table-miss flow entry\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n        self.logger.info(\"switch:%s conected\", dpid)\n    '''\n    - Função para adicionar flow entries, adicionando uma match condition, um conjunto de acções assim como o tempo efectivo e prioridade de entrada para o pacote em cada nova flow entry\n        - Funcionalidaes adicionais adicionadas ao switch para continuar o processamento de fluxo numa diferente tabela ou mesmo a escrita de metadata para o switch... são escritas com um simples set de instruções\n            - datapath: representa o switch que diparou o evento, referenciado por uma variavel local datapath\n            - priority: prioridade de entrada para o flow entry representado por um inteiro\n            - actions: Lista de acções que vão ser enviadas dentro do flow mod\n            - buffer_id: Parametro opcional que indica se um pacote é buffered para o switch e depois enviado para o controller.\n    '''\n    \n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        \n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        \n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,actions)]\n        \n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,priority=priority, match=match,instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority, match=match, instructions=inst)\n        \n        datapath.send_msg(mod)\n    \n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        \n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"pacote truncado: apenas %s de %s bytes\", ev.msg.total_len, ev.msg_len)\n\n        #data\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n        \n        #analise da data\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n        \n        if eth.ethertype == ether.ETH_TYPE_LLDP:\n            return\n        \n        #Criacao da tabela mac-port que contém o endereço source do pacote associado com a porta a que chegou.\n        dst = eth.dst\n        src = eth.src\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n        self.mac_to_port[dpid][src] = in_port\n        \n        #Encontrar o destino.\n        \n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n        \n        actions = [parser.OFPActionOutput(out_port)]\n        \n        #enviar flow entry\n        if out_port!=ofproto.OFPP_FLOOD:\n            if l3.ethertype == ether.ETH_TYPE_IP:\n                ip=pkt.get_protocols(ipv4.ipv4)\n                srcip=ip.src\n                dstip=ip.dst\n                match=parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,ipv4_src=srcip,ipv4_dst=dstip)\n        \n            if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                self.add_flow(datapath,1,match,actions,msg.buffer_id)\n            \n            else:\n                self.add_flow(datapath,1,match,actions)\n            \n        data = None\n        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n            data = msg.data\n        \n        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,in_port=in_port, actions=actions, data=data)\n        datapath.send_msg(out)\n        \n        "
        }
    ]
}