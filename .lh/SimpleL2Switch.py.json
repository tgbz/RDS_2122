{
    "sourceFile": "SimpleL2Switch.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1651497415471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651499206580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,5 +166,7 @@\n         \n         total_len -> Comprimento da data dos pacotes recebidos.\n         \n         buffer_id -> Quando pacotes recebidos são buffered no OpenFlow Switch, indica o seu ID. Se não for buffered, ryu.ofproto.ofproto_v1_3.OFP_NO_BUFFER é definido. \n-    \"\"\"        \n\\ No newline at end of file\n+    \"\"\"        \n+    \n+    \n\\ No newline at end of file\n"
                }
            ],
            "date": 1651497415471,
            "name": "Commit-0",
            "content": "from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\n\nclass SimpleL2Switch(app_manager.RyuApp):\n    \"\"\"_summary_\n        Para a implementação de uma app Ryu, e efectuada uma herança da ryu.bae.app_manager.RyuApp\n        Utlizamos o OpenFlow v1.3\n        Inicializamos o dicionário de mac addresses, correspondente à tabela\n        \n        No protocolo OpenFlow, alguns procedimentos tais como handshakres são necessários para a comunicação entre o switch OpenFlow e o controlador foram definidos.\n    Args:\n        app_manager (_type_): _description_\n    \"\"\"\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(SimpleL2Switch, self).__init__(*args, **kwargs)\n        # initialize mac address table.\n        self.mac_to_port = {}\n\n\n    \"\"\"\n    Com o Ryu, quando uma mensagem OpenFlow é recebida, um evento correspondente à mensagem é gerado. A aplicação Ryu implementa um gestor de eventos correspondente à mensagem que deseja receber.\n    \n    Este gestor de eventos define uma função tendo um objecto evento para o argumento e usa o:\n    \n    ryu.controller.handler.set_ev_cls\n    \n    Esta classe (set_ev_cls) especifica a classe evento que suporta a mensagem recebida eo estado do switch OpenFlow para o argumento\n    \n    A classe evento é ryu.controller.ofp_event.EventOFP + <OpenFlow message name>.\n    \n    Por exemplo,\n    \n        No caso do de uma mensagem Packet-In, esta torna-se um EventOFPPacketIn.\n\n        Exemplos:\n        ryu.controller.handler.HANDSHAKE_DISPATCHER -> Troca de HELLOs\n        \n        ryu.controller.handler.CONFIG_DISPATCHER -> à espera de receber mensagens SwitchFeatures\n        \n        ryu.controller.handler.MAIN_DISPATCHER -> Estado normal.\n        \n        ryu.controller.handler.DEAD_DISPATCHER -> Desconexão de conexão\n    \n    Depois do handshake com o switch OpenFlow ser efetuado, uma flow-entry Table-miss é adicionada à flow table para ser tornada como pronta para receber uma mensagem Packet-In\n    \n    Em concreto, ao receber uma mensagem Switch Features (Features Reply), uma flow entry é adicionada \n    \"\"\"\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # install the table-miss flow entry.\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n    \n    \"\"\"\n    Na ev.msg, a instância da classe da mensagem OpenFlow correspondente ao evento é guardada. Neste caso, é ryu.ofproto.ofproto_v1_3_parser.OFPSwitchFeatures\n    \n    Na msg.datapath, a instância da classe ryu.controller.controller.Datapath correspondente ao switch OpenFlow que é emitio quando esta mensagem é guardada.\n    \n    A classe Datapath executa processamento importante tal como a efetiva comunicação com o switch OpenFlow e o evento corresponendete à mensagem recebida.\n    \n    Os atributos princiapsi utilizadas pelas aplicações Ryu são:\n    \n        id -> ID (data path ID) d switch OpenFlow conectado.\n        \n        ofproto -> indica o modulo ofproto que suporta a versão do OpenFlow em utilização. No caso do OpenFlow 1.3 irá ser o módulo:\n                ryu.ofproto.ofproto_v1_3\n                \n        ofproto_parser -> o mesmo que ofproto, indica o modulo of_parser. No caso do OF 1.3:\n                ryu.ofproto.ofproto_v1_3_parser\n        \n        os métodos principais da classe Datapath utilizada na aplicação Ryu são os seguintes:\n\n            send_msg(msg) -> Envia a mensagem OpenFlow. Msg é uma sub classe do ryu.ofproto.ofproto_parser.MsgBase correspondente ao envio da mensagem\n            \n        O switching hub não utiliza propriamente a mensagem Switch Features em si.... É gerida como um evento para ober o timing e adicionar uma entrada de fluxo Table-Miss\n    \"\"\"\n    \n    \n    def add_flow(self, datapath, priority, match, actions):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # construct flow_mod message and send it.\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                                actions)]\n        mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n        \n    \"\"\"A flow entry Table-Miss tem a prioridade mínima (0) e a sua entrada corresponde a todos os pacotes. Na instrução desta antrada, através da especificação a acção de output para output na porta do contorlador, no caso do pacote recebido não corresponder a nenhuma das entradas de fluxo normais, um Packet-in é emitido.\n    \n    Uma correspondência fazia é gerada para correspondera todos os pacotes. Match é expresso na classe OFPMatch.\n    \n    De seguida, uma instância da classe OUTPUT action class (OFPActionOutput) é gerada para transferir para a porta de controlo. A porta de controlo é especificada como o output destination e OFPCML_NO_BUFFER é especificado para max_len de forma a enviar todos os pacotes para o controlador.\n    \n    Finalmente, 0 (lowest) é especiicado para prioridade e o método add_flow() é executado para enviar uma mensagem Flow Mod.\n    \"\"\"\n    \n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # get Datapath ID to identify OpenFlow switches.\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n\n        # analyse the received packets using the packet library.\n        pkt = packet.Packet(msg.data)\n        eth_pkt = pkt.get_protocol(ethernet.ethernet)\n        dst = eth_pkt.dst\n        src = eth_pkt.src\n\n        # get the received port number from packet_in message.\n        in_port = msg.match['in_port']\n\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n\n        # learn a mac address to avoid FLOOD next time.\n        self.mac_to_port[dpid][src] = in_port\n\n        # if the destination mac address is already learned,\n        # decide which port to output the packet, otherwise FLOOD.\n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n\n        # construct action list.\n        actions = [parser.OFPActionOutput(out_port)]\n\n        # install a flow to avoid packet_in next time.\n        if out_port != ofproto.OFPP_FLOOD:\n            match = parser.OFPMatch(in_port=in_port, eth_dst=dst)\n            self.add_flow(datapath, 1, match, actions)\n\n        # construct packet_out message and send it.\n        out = parser.OFPPacketOut(datapath=datapath,\n                                  buffer_id=ofproto.OFP_NO_BUFFER,\n                                  in_port=in_port, actions=actions,\n                                  data=msg.data)\n        datapath.send_msg(out)\n        \n    \n    \"\"\"\n    Atributos OFPPacketIn:\n        match -> instância da classe ryu.ofproto.ofproto_v1_3_parser.OFPMatch em que a meta informação dos pacotes recebidos é definida.\n        \n        data -> Data em formato binário indicando os pacotes recebidos em si\n        \n        total_len -> Comprimento da data dos pacotes recebidos.\n        \n        buffer_id -> Quando pacotes recebidos são buffered no OpenFlow Switch, indica o seu ID. Se não for buffered, ryu.ofproto.ofproto_v1_3.OFP_NO_BUFFER é definido. \n    \"\"\"        "
        }
    ]
}