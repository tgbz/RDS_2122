{
    "sourceFile": "ex2/L3Switch.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1652122068941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1652122068941,
            "name": "Commit-0",
            "content": "from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\nfrom ryu.lib.packet import ipv4\nfrom ryu.lib.packet import in_proto\nfrom ryu.lib.packet import icmp\nfrom ryu.lib.packet import arp\n\n\n\nclass L3Switch(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n\n    def __init__(self, *args, **kwargs):\n        super(L3Switch, self).__init__(*args, **kwargs)\n        self.mac_to_port = {}\n        self.arp_table = {\"10.0.1.254\": \"00:00:00:00:00:01\",\n            \"10.0.1.2\": \"00:00:00:00:00:02\",\n            \"10.0.1.3\": \"00:00:00:00:00:03\",\n            \"10.0.2.254\": \"00:00:00:00:00:04\",\n            \"10.0.2.2\": \"00:00:00:00:00:05\",\n            \"10.0.2.3\": \"00:00:00:00:00:06\",\n            \"10.0.3.1\": \"00:00:00:00:00:07\",\n            \"10.0.3.2\": \"00:00:00:00:00:08\",\n            \"10.0.3.3\": \"00:00:00:00:00:09\",\n}\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        \n        if parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IPV6):\n            mod = parser.OFPFlowMod(datapath=datapath, priority=0, match=match,instructions=[])\n        \n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    idle_timeout=500, hard_timeout=500, priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    idle_timeout=500, hard_timeout=500, match=match, instructions=inst)\n        datapath.send_msg(mod)\n        \n\n    \n    def arp_process(self, datapath, eth, a, in_port):\n        r = self.arp_table.get(a.dst_ip)\n        if r:\n            self.logger.info(\"Matched MAC %s \", r)\n            arp_resp = packet.Packet()\n            arp_resp.add_protocol(ethernet.ethernet(ethertype=eth.ethertype,\n                                    dst=eth.src, src=r))\n            arp_resp.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                    src_mac=r, src_ip=a.dst_ip,\n                                    dst_mac=a.src_mac,\n                                    dst_ip=a.src_ip))\n\n            arp_resp.serialize()\n            actions = []\n            actions.append(datapath.ofproto_parser.OFPActionOutput(in_port))\n            parser = datapath.ofproto_parser  \n            ofproto = datapath.ofproto\n            out = parser.OFPPacketOut(datapath=datapath, buffer_id=ofproto.OFP_NO_BUFFER,\n                                    in_port=ofproto.OFPP_CONTROLLER, actions=actions, data=arp_resp)\n            datapath.send_msg(out)\n            self.logger.info(\"Enviado ARP Response packet\")\n        else: \n            print(\"Arp n√£o detectado\")\n    \n    \n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        # If you hit this you might want to increase\n        # the \"miss_send_length\" of your switch\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            # ignore lldp packet\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n\n        # learn a mac address to avoid FLOOD next time.\n        self.mac_to_port[dpid][src] = in_port\n        \n        #check if arp packet is received\n        if eth.ethertype == ether_types.ETH_TYPE_ARP:\n            self.logger.info(\"Pacote ARP recebido %s %s %s\", dpid, src, dst)\n            a = pkt.get_protocol(arp.arp)\n            self.arp_process(datapath, eth, a, in_port)\n            return\n\n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n\n        actions = [parser.OFPActionOutput(out_port)]\n\n        # install a flow to avoid packet_in next time\n        if out_port != ofproto.OFPP_FLOOD:\n\n            if eth.ethertype == ether_types.ETH_TYPE_IP:\n                ip = pkt.get_protocol(ipv4.ipv4)\n                srcip = ip.src\n                dstip = ip.dst\n                protocol = ip.proto\n                \n                if protocol == in_proto.IPPROTO_ICMP:\n                    match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP, ipv4_src=srcip, ipv4_dst=dstip)\n                if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                    self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                    return\n                else:\n                    self.add_flow(datapath, 1, match, actions)\n        data = None\n        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n            data = msg.data\n\n        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                  in_port=in_port, actions=actions, data=data)\n        datapath.send_msg(out)\n\n"
        }
    ]
}