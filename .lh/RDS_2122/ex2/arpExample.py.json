{
    "sourceFile": "ex2/arpExample.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1651647951071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651647967178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,5 +153,5 @@\n             data = msg.data\n \n         out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                   in_port=in_port, actions=actions, data=data)\n-        datapath.send_msg(out)\n+        datapath.send_msg(out)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1651648023790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n              \"10.0.0.4\": \"00:00:00:00:00:04\"\n              }\n \n \n-class SimpleSwitch13(app_manager.RyuApp):a\n+class SimpleSwitch13(app_manager.RyuApp):\n     OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n \n     def __init__(self, *args, **kwargs):\n         super(SimpleSwitch13, self).__init__(*args, **kwargs)\n@@ -51,17 +51,17 @@\n         # truncated packet data. In that case, we cannot output packets\n         # correctly.  The bug has been fixed in OVS v2.1.0.\n         match = parser.OFPMatch()\n         actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n-                                          ofproto.OFPCML_NO_BUFFER)]\n+                                            ofproto.OFPCML_NO_BUFFER)]\n         self.add_flow(datapath, 0, match, actions)\n \n     def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n         ofproto = datapath.ofproto\n         parser = datapath.ofproto_parser\n \n         inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n-                                             actions)]\n+                                                actions)]\n         if buffer_id:\n             mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                     priority=priority, match=match,\n                                     instructions=inst)\n@@ -75,21 +75,21 @@\n         if r:\n             self.logger.info(\"Matched MAC %s \", r)\n             arp_resp = packet.Packet()\n             arp_resp.add_protocol(ethernet.ethernet(ethertype=eth.ethertype,\n-                                  dst=eth.src, src=r))\n+                                    dst=eth.src, src=r))\n             arp_resp.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n-                                  src_mac=r, src_ip=a.dst_ip,\n-                                  dst_mac=a.src_mac,\n-                                  dst_ip=a.src_ip))\n+                                    src_mac=r, src_ip=a.dst_ip,\n+                                    dst_mac=a.src_mac,\n+                                    dst_ip=a.src_ip))\n \n             arp_resp.serialize()\n             actions = []\n             actions.append(datapath.ofproto_parser.OFPActionOutput(in_port))\n             parser = datapath.ofproto_parser  \n             ofproto = datapath.ofproto\n             out = parser.OFPPacketOut(datapath=datapath, buffer_id=ofproto.OFP_NO_BUFFER,\n-                                  in_port=ofproto.OFPP_CONTROLLER, actions=actions, data=arp_resp)\n+                                    in_port=ofproto.OFPP_CONTROLLER, actions=actions, data=arp_resp)\n             datapath.send_msg(out)\n             self.logger.info(\"Proxied ARP Response packet\")\n \n \n@@ -99,9 +99,9 @@\n         # If you hit this you might want to increase\n         # the \"miss_send_length\" of your switch\n         if ev.msg.msg_len < ev.msg.total_len:\n             self.logger.debug(\"packet truncated: only %s of %s bytes\",\n-                              ev.msg.msg_len, ev.msg.total_len)\n+                                ev.msg.msg_len, ev.msg.total_len)\n         msg = ev.msg\n         datapath = msg.datapath\n         ofproto = datapath.ofproto\n         parser = datapath.ofproto_parser\n@@ -152,6 +152,6 @@\n         if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n             data = msg.data\n \n         out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n-                                  in_port=in_port, actions=actions, data=data)\n+                                    in_port=in_port, actions=actions, data=data)\n         datapath.send_msg(out)\n\\ No newline at end of file\n"
                }
            ],
            "date": 1651647951071,
            "name": "Commit-0",
            "content": "# Copyright (C) 2011 Nippon Telegraph and Telephone Corporation.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nfrom ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\nfrom ryu.lib.packet import arp\n\narp_table = {\"10.0.0.1\": \"00:00:00:00:00:01\",\n             \"10.0.0.2\": \"00:00:00:00:00:02\",\n             \"10.0.0.3\": \"00:00:00:00:00:03\",\n             \"10.0.0.4\": \"00:00:00:00:00:04\"\n             }\n\n\nclass SimpleSwitch13(app_manager.RyuApp):a\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(SimpleSwitch13, self).__init__(*args, **kwargs)\n        self.mac_to_port = {}\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # install table-miss flow entry\n        #\n        # We specify NO BUFFER to max_len of the output action due to\n        # OVS bug. At this moment, if we specify a lesser number, e.g.,\n        # 128, OVS will send Packet-In with invalid buffer_id and\n        # truncated packet data. In that case, we cannot output packets\n        # correctly.  The bug has been fixed in OVS v2.1.0.\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n    def arp_process(self, datapath, eth, a, in_port):\n        r = arp_table.get(a.dst_ip)\n        if r:\n            self.logger.info(\"Matched MAC %s \", r)\n            arp_resp = packet.Packet()\n            arp_resp.add_protocol(ethernet.ethernet(ethertype=eth.ethertype,\n                                  dst=eth.src, src=r))\n            arp_resp.add_protocol(arp.arp(opcode=arp.ARP_REPLY,\n                                  src_mac=r, src_ip=a.dst_ip,\n                                  dst_mac=a.src_mac,\n                                  dst_ip=a.src_ip))\n\n            arp_resp.serialize()\n            actions = []\n            actions.append(datapath.ofproto_parser.OFPActionOutput(in_port))\n            parser = datapath.ofproto_parser  \n            ofproto = datapath.ofproto\n            out = parser.OFPPacketOut(datapath=datapath, buffer_id=ofproto.OFP_NO_BUFFER,\n                                  in_port=ofproto.OFPP_CONTROLLER, actions=actions, data=arp_resp)\n            datapath.send_msg(out)\n            self.logger.info(\"Proxied ARP Response packet\")\n\n\n\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        # If you hit this you might want to increase\n        # the \"miss_send_length\" of your switch\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            # ignore lldp packet\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n\n        # learn a mac address to avoid FLOOD next time.\n        self.mac_to_port[dpid][src] = in_port\n\n        # Check whether is it arp packet\n        if eth.ethertype == ether_types.ETH_TYPE_ARP:\n            self.logger.info(\"Received ARP Packet %s %s %s \", dpid, src, dst)\n            a = pkt.get_protocol(arp.arp)\n            self.arp_process(datapath, eth, a, in_port)\n            return\n\n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n\n        actions = [parser.OFPActionOutput(out_port)]\n\n        # install a flow to avoid packet_in next time\n        if out_port != ofproto.OFPP_FLOOD:\n            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)\n            # verify if we have a valid buffer_id, if yes avoid to send both\n            # flow_mod & packet_out\n            if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                return\n            else:\n                self.add_flow(datapath, 1, match, actions)\n        data = None\n        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n            data = msg.data\n\n        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                  in_port=in_port, actions=actions, data=data)\n        datapath.send_msg(out)\n"
        }
    ]
}