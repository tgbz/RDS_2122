{
    "sourceFile": "SimpleL2Switch.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1651580128596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1651580142875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ryu.ofproto import ofproto_v1_3\n from ryu.lib.packet import packet\n from ryu.lib.packet import ethernet\n \n-class SimpleSwitch13(app_manager.RyuApp):\n+class SimpleSwitchL2(app_manager.RyuApp):\n     OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n \n     def __init__(self, *args, **kwargs):\n         super(SimpleSwitch13, self).__init__(*args, **kwargs)\n"
                },
                {
                    "date": 1651580148319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class SimpleSwitchL2(app_manager.RyuApp):\n     OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n \n     def __init__(self, *args, **kwargs):\n-        super(SimpleSwitch13, self).__init__(*args, **kwargs)\n+        super(SimpleSwitchL2, self).__init__(*args, **kwargs)\n         self.mac_to_port = {}\n \n     @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n     def switch_features_handler(self, ev):\n"
                },
                {
                    "date": 1651580180223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n from ryu.controller.handler import set_ev_cls\n from ryu.ofproto import ofproto_v1_3\n from ryu.lib.packet import packet\n from ryu.lib.packet import ethernet\n+from ryu.lib.packet import ether_types\n \n+\n class SimpleSwitchL2(app_manager.RyuApp):\n     OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n \n     def __init__(self, *args, **kwargs):\n"
                },
                {
                    "date": 1651580190778,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,16 +19,8 @@\n     def switch_features_handler(self, ev):\n         datapath = ev.msg.datapath\n         ofproto = datapath.ofproto\n         parser = datapath.ofproto_parser\n-\n-        # install table-miss flow entry\n-        #\n-        # We specify NO BUFFER to max_len of the output action due to\n-        # OVS bug. At this moment, if we specify a lesser number, e.g.,\n-        # 128, OVS will send Packet-In with invalid buffer_id and\n-        # truncated packet data. In that case, we cannot output packets\n-        # correctly.  The bug has been fixed in OVS v2.1.0.\n         match = parser.OFPMatch()\n         actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                           ofproto.OFPCML_NO_BUFFER)]\n         self.add_flow(datapath, 0, match, actions)\n"
                },
                {
                    "date": 1651580196708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,10 +41,8 @@\n         datapath.send_msg(mod)\n \n     @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n     def _packet_in_handler(self, ev):\n-        # If you hit this you might want to increase\n-        # the \"miss_send_length\" of your switch\n         if ev.msg.msg_len < ev.msg.total_len:\n             self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                               ev.msg.msg_len, ev.msg.total_len)\n         msg = ev.msg\n"
                },
                {
                    "date": 1651580217239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,19 +54,15 @@\n         pkt = packet.Packet(msg.data)\n         eth = pkt.get_protocols(ethernet.ethernet)[0]\n \n         if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n-            # ignore lldp packet\n             return\n         dst = eth.dst\n         src = eth.src\n \n         dpid = datapath.id\n         self.mac_to_port.setdefault(dpid, {})\n-\n         self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n-\n-        # learn a mac address to avoid FLOOD next time.\n         self.mac_to_port[dpid][src] = in_port\n \n         if dst in self.mac_to_port[dpid]:\n             out_port = self.mac_to_port[dpid][dst]\n@@ -74,13 +70,10 @@\n             out_port = ofproto.OFPP_FLOOD\n \n         actions = [parser.OFPActionOutput(out_port)]\n \n-        # install a flow to avoid packet_in next time\n         if out_port != ofproto.OFPP_FLOOD:\n             match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)\n-            # verify if we have a valid buffer_id, if yes avoid to send both\n-            # flow_mod & packet_out\n             if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                 self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                 return\n             else:\n"
                }
            ],
            "date": 1651580128596,
            "name": "Commit-0",
            "content": "from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\n\nclass SimpleSwitch13(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(SimpleSwitch13, self).__init__(*args, **kwargs)\n        self.mac_to_port = {}\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # install table-miss flow entry\n        #\n        # We specify NO BUFFER to max_len of the output action due to\n        # OVS bug. At this moment, if we specify a lesser number, e.g.,\n        # 128, OVS will send Packet-In with invalid buffer_id and\n        # truncated packet data. In that case, we cannot output packets\n        # correctly.  The bug has been fixed in OVS v2.1.0.\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        # If you hit this you might want to increase\n        # the \"miss_send_length\" of your switch\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            # ignore lldp packet\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n\n        # learn a mac address to avoid FLOOD next time.\n        self.mac_to_port[dpid][src] = in_port\n\n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n\n        actions = [parser.OFPActionOutput(out_port)]\n\n        # install a flow to avoid packet_in next time\n        if out_port != ofproto.OFPP_FLOOD:\n            match = parser.OFPMatch(in_port=in_port, eth_dst=dst, eth_src=src)\n            # verify if we have a valid buffer_id, if yes avoid to send both\n            # flow_mod & packet_out\n            if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                return\n            else:\n                self.add_flow(datapath, 1, match, actions)\n        data = None\n        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n            data = msg.data\n\n        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                  in_port=in_port, actions=actions, data=data)\n        datapath.send_msg(out)\n\n    "
        }
    ]
}