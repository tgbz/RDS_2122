{
    "sourceFile": "TP1/ex2/l3.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1652193983469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652195173097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+from ryu.base import app_manager\n+from ryu.controller import ofp_event\n+from ryu.controller.handler import CONFIG_DISPATCHER, DEAD_DISPATCHER\n+from ryu.controller.handler import MAIN_DISPATCHER, HANDSHAKE_DISPATCHER\n+from ryu.controller.handler import set_ev_cls\n+from ryu.ofproto import ofproto_v1_3\n+from ryu.ofproto import ether\n+from ryu.lib.packet import packet\n+from ryu.lib.packet import ethernet\n+from ryu.lib.packet import arp\n+from ryu.lib.packet import ipv4\n+from ryu.lib.packet import ipv6\n+from ryu import utils\n+\n+\n+class l3(app_manager.RyuApp):\n+    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n+    \n+    def __init__(self, *args, **kwargs):\n+        super(l3, self).__init__(*args, **kwargs)\n+        self.mac_to_port = {}\n+    ''' \n+    - Gestor de eventos respnosável por novos switches, este gestor de eventos especifica as acções a serem tomadas para um evento em particular tal como um pacote a entrar. O decorador set_ev_cls menciona que a classe do evento por trás da mensagem a entrar e o status do OpenFlow switch\n+    '''   \n+    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n+    def switch_features_handler(self, ev):\n+        \n+        datapath = ev.msg.datapath\n+        ofproto = datapath.ofproto\n+        parser = datapath.ofproto_parser\n+        dpid = datapath.id\n+        #Instalação da table-miss flow entry\n+        match = parser.OFPMatch()\n+        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,ofproto.OFPCML_NO_BUFFER)]\n+        self.add_flow(datapath, 0, match, actions)\n+        self.logger.info(\"switch:%s conected\", dpid)\n+    '''\n+    - Função para adicionar flow entries, adicionando uma match condition, um conjunto de acções assim como o tempo efectivo e prioridade de entrada para o pacote em cada nova flow entry\n+        - Funcionalidaes adicionais adicionadas ao switch para continuar o processamento de fluxo numa diferente tabela ou mesmo a escrita de metadata para o switch... são escritas com um simples set de instruções\n+            - datapath: representa o switch que diparou o evento, referenciado por uma variavel local datapath\n+            - priority: prioridade de entrada para o flow entry representado por um inteiro\n+            - actions: Lista de acções que vão ser enviadas dentro do flow mod\n+            - buffer_id: Parametro opcional que indica se um pacote é buffered para o switch e depois enviado para o controller.\n+    '''\n+    \n+    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n+        \n+        ofproto = datapath.ofproto\n+        parser = datapath.ofproto_parser\n+        \n+        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,actions)]\n+        \n+        if buffer_id:\n+            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,priority=priority, match=match,instructions=inst)\n+        else:\n+            mod = parser.OFPFlowMod(datapath=datapath, priority=priority, match=match, instructions=inst)\n+        \n+        datapath.send_msg(mod)\n+    \n+        \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652196283492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ryu.ofproto import ofproto_v1_3\n from ryu.ofproto import ether\n from ryu.lib.packet import packet\n from ryu.lib.packet import ethernet\n+from ryu.lib.packet import ether_types\n from ryu.lib.packet import arp\n from ryu.lib.packet import ipv4\n from ryu.lib.packet import ipv6\n from ryu import utils\n@@ -56,5 +57,49 @@\n             mod = parser.OFPFlowMod(datapath=datapath, priority=priority, match=match, instructions=inst)\n         \n         datapath.send_msg(mod)\n     \n+    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n+    def _packet_in_handler(self, ev):\n+        \n+        if ev.msg_len < ev.msg.total_len:\n+            self.logger.debug(\"pacote truncado: apenas %s de %s bytes\", ev.msg.total_len, ev.msg_len)\n+\n+        #data\n+        msg = ev.msg\n+        datapath = msg.data.datapath\n+        ofproto = datapath.ofproto\n+        parser = datapath.ofproto_parser\n+        in_port = msg.match['in_port']\n+        \n+        #analise da data\n+        pkt = packet.Packet(msg.data)\n+        eth = pkt.get_protocols(ethernet.ethernet)[0]\n+        \n+        if eth.ethertype == ether.ETH_TYPE_LLDP:\n+            return\n+        \n+        #Criacao da tabela mac-port que contém o endereço source do pacote associado com a porta a que chegou.\n+        dst = eth.dst\n+        src = eth.src\n+        dpid = datapath.id\n+        self.mac_to_port.setdefault(dpid, {})\n+        self.mac_to_port[dpid][src] = in_port\n+        \n+        #Encontrar o destino.\n+        \n+        if dst in self.mac_to_port[dpid]:\n+            out_port = self.mac_to_port[dpid][dst]\n+        else:\n+            out_port = ofproto.OFPP_FLOOD\n+        \n+        actions = [parser.OFPActionOutput(out_port)]\n+        \n+        #enviar flow entry\n+        if out_port!=ofproto.OFPP_FLOOD:\n+            if l3.ethertype == ether.ETH_TYPE_IP:\n+                ip=pkt.get_protocols(ipv4.ipv4)\n+                srcip=ip.src\n+                dstip=ip.dst\n+                match=parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,ipv4_src=srcip,ipv4_dst=dstip)\n+                \n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652196405333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,6 +100,19 @@\n                 ip=pkt.get_protocols(ipv4.ipv4)\n                 srcip=ip.src\n                 dstip=ip.dst\n                 match=parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,ipv4_src=srcip,ipv4_dst=dstip)\n-                \n+        \n+        if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n+            self.add_flow(datapath,1,match,actions,msg.buffer_id)\n+            \n+        else:\n+            self.add_flow(datapath,1,match,actions)\n+            \n+        data = None\n+        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n+            data = msg.data\n+        \n+        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,in_port=in_port, actions=actions, data=data)\n+        datapath.send_msg(out)\n+        \n         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1652196896130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     \n     @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n     def _packet_in_handler(self, ev):\n         \n-        if ev.msg_len < ev.msg.total_len:\n+        if ev.msg.msg_len < ev.msg.total_len:\n             self.logger.debug(\"pacote truncado: apenas %s de %s bytes\", ev.msg.total_len, ev.msg_len)\n \n         #data\n         msg = ev.msg\n"
                },
                {
                    "date": 1652196945369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n             self.logger.debug(\"pacote truncado: apenas %s de %s bytes\", ev.msg.total_len, ev.msg_len)\n \n         #data\n         msg = ev.msg\n-        datapath = msg.data.datapath\n+        datapath = msg.datapath\n         ofproto = datapath.ofproto\n         parser = datapath.ofproto_parser\n         in_port = msg.match['in_port']\n         \n"
                },
                {
                    "date": 1652197080729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,17 +101,17 @@\n                 srcip=ip.src\n                 dstip=ip.dst\n                 match=parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,ipv4_src=srcip,ipv4_dst=dstip)\n         \n-        if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n-            self.add_flow(datapath,1,match,actions,msg.buffer_id)\n+            if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n+                self.add_flow(datapath,1,match,actions,msg.buffer_id)\n             \n-        else:\n-            self.add_flow(datapath,1,match,actions)\n+            else:\n+                self.add_flow(datapath,1,match,actions)\n             \n-        data = None\n-        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n-            data = msg.data\n+            data = None\n+            if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n+                data = msg.data\n         \n         out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,in_port=in_port, actions=actions, data=data)\n         datapath.send_msg(out)\n         \n"
                },
                {
                    "date": 1652197104026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,10 +108,10 @@\n             else:\n                 self.add_flow(datapath,1,match,actions)\n             \n             data = None\n-            if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n-                data = msg.data\n+        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n+            data = msg.data\n         \n         out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,in_port=in_port, actions=actions, data=data)\n         datapath.send_msg(out)\n         \n"
                },
                {
                    "date": 1652197138599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n             \n             else:\n                 self.add_flow(datapath,1,match,actions)\n             \n-            data = None\n+        data = None\n         if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n             data = msg.data\n         \n         out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,in_port=in_port, actions=actions, data=data)\n"
                }
            ],
            "date": 1652193983469,
            "name": "Commit-0",
            "content": ""
        }
    ]
}