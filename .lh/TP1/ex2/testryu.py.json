{
    "sourceFile": "TP1/ex2/testryu.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1652204106379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1652205256889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,10 @@\n         datapath = msg.datapath\n         ofproto = datapath.ofproto\n         parser = datapath.ofproto_parser\n         in_port = msg.match['in_port']\n+        \n+        print(\"packet in: \\n datapath: %s ofproto: %s\\n parser:%s \\n in_port: %s\" % msg, datapath, ofproto, parser, in_port)\n \n         pkt = packet.Packet(msg.data)\n         eth = pkt.get_protocols(ethernet.ethernet)[0]\n \n@@ -69,8 +71,11 @@\n             # ignore lldp packet\n             return\n         dst = eth.dst\n         src = eth.src\n+        \n+        print(\"source: %s destination: %s\" % (src, dst))\n+        \n \n         dpid = datapath.id\n         self.mac_to_port.setdefault(dpid, {})\n \n"
                },
                {
                    "date": 1652205269543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n \n         if dst in self.mac_to_port[dpid]:\n             out_port = self.mac_to_port[dpid][dst]\n         else:\n+            print(\"Need to flood\")\n             out_port = ofproto.OFPP_FLOOD\n \n         actions = [parser.OFPActionOutput(out_port)]\n \n"
                },
                {
                    "date": 1652205306490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n         ofproto = datapath.ofproto\n         parser = datapath.ofproto_parser\n         in_port = msg.match['in_port']\n         \n-        print(\"packet in: \\n datapath: %s ofproto: %s\\n parser:%s \\n in_port: %s\" % msg, datapath, ofproto, parser, in_port)\n \n         pkt = packet.Packet(msg.data)\n         eth = pkt.get_protocols(ethernet.ethernet)[0]\n \n@@ -72,9 +71,9 @@\n             return\n         dst = eth.dst\n         src = eth.src\n         \n-        print(\"source: %s destination: %s\" % (src, dst))\n+        print(\"packet in : source: %s destination: %s\" % (src, dst))\n         \n \n         dpid = datapath.id\n         self.mac_to_port.setdefault(dpid, {})\n"
                },
                {
                    "date": 1652205341136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,9 @@\n             if eth.ethertype == ether_types.ETH_TYPE_IP:\n                 ip = pkt.get_protocol(ipv4.ipv4)\n                 srcip = ip.src\n                 dstip = ip.dst\n+                print(\"ip protocol detected, srcip: %s dstip: %s\" % (srcip, dstip))\n                 match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n                                         ipv4_src=srcip,\n                                         ipv4_dst=dstip\n                                         )\n"
                }
            ],
            "date": 1652204106379,
            "name": "Commit-0",
            "content": "from ryu.base import app_manager\nfrom ryu.controller import ofp_event\nfrom ryu.controller.handler import CONFIG_DISPATCHER, MAIN_DISPATCHER\nfrom ryu.controller.handler import set_ev_cls\nfrom ryu.ofproto import ofproto_v1_3\nfrom ryu.lib.packet import packet\nfrom ryu.lib.packet import ethernet\nfrom ryu.lib.packet import ether_types\nfrom ryu.lib.packet import ipv4\n\n\nclass SimpleSwitch13(app_manager.RyuApp):\n    OFP_VERSIONS = [ofproto_v1_3.OFP_VERSION]\n\n    def __init__(self, *args, **kwargs):\n        super(SimpleSwitch13, self).__init__(*args, **kwargs)\n        self.mac_to_port = {}\n\n    @set_ev_cls(ofp_event.EventOFPSwitchFeatures, CONFIG_DISPATCHER)\n    def switch_features_handler(self, ev):\n        datapath = ev.msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        # install table-miss flow entry\n        #\n        # We specify NO BUFFER to max_len of the output action due to\n        # OVS bug. At this moment, if we specify a lesser number, e.g.,\n        # 128, OVS will send Packet-In with invalid buffer_id and\n        # truncated packet data. In that case, we cannot output packets\n        # correctly.  The bug has been fixed in OVS v2.1.0.\n        match = parser.OFPMatch()\n        actions = [parser.OFPActionOutput(ofproto.OFPP_CONTROLLER,\n                                          ofproto.OFPCML_NO_BUFFER)]\n        self.add_flow(datapath, 0, match, actions)\n\n    def add_flow(self, datapath, priority, match, actions, buffer_id=None):\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n\n        inst = [parser.OFPInstructionActions(ofproto.OFPIT_APPLY_ACTIONS,\n                                             actions)]\n        if buffer_id:\n            mod = parser.OFPFlowMod(datapath=datapath, buffer_id=buffer_id,\n                                    priority=priority, match=match,\n                                    instructions=inst)\n        else:\n            mod = parser.OFPFlowMod(datapath=datapath, priority=priority,\n                                    match=match, instructions=inst)\n        datapath.send_msg(mod)\n\n    @set_ev_cls(ofp_event.EventOFPPacketIn, MAIN_DISPATCHER)\n    def _packet_in_handler(self, ev):\n        # If you hit this you might want to increase\n        # the \"miss_send_length\" of your switch\n        if ev.msg.msg_len < ev.msg.total_len:\n            self.logger.debug(\"packet truncated: only %s of %s bytes\",\n                              ev.msg.msg_len, ev.msg.total_len)\n        msg = ev.msg\n        datapath = msg.datapath\n        ofproto = datapath.ofproto\n        parser = datapath.ofproto_parser\n        in_port = msg.match['in_port']\n\n        pkt = packet.Packet(msg.data)\n        eth = pkt.get_protocols(ethernet.ethernet)[0]\n\n        if eth.ethertype == ether_types.ETH_TYPE_LLDP:\n            # ignore lldp packet\n            return\n        dst = eth.dst\n        src = eth.src\n\n        dpid = datapath.id\n        self.mac_to_port.setdefault(dpid, {})\n\n        self.logger.info(\"packet in %s %s %s %s\", dpid, src, dst, in_port)\n\n        # learn a mac address to avoid FLOOD next time.\n        self.mac_to_port[dpid][src] = in_port\n\n        if dst in self.mac_to_port[dpid]:\n            out_port = self.mac_to_port[dpid][dst]\n        else:\n            out_port = ofproto.OFPP_FLOOD\n\n        actions = [parser.OFPActionOutput(out_port)]\n\n        # install a flow to avoid packet_in next time\n        if out_port != ofproto.OFPP_FLOOD:\n\n            # check IP Protocol and create a match for IP\n            if eth.ethertype == ether_types.ETH_TYPE_IP:\n                ip = pkt.get_protocol(ipv4.ipv4)\n                srcip = ip.src\n                dstip = ip.dst\n                match = parser.OFPMatch(eth_type=ether_types.ETH_TYPE_IP,\n                                        ipv4_src=srcip,\n                                        ipv4_dst=dstip\n                                        )\n                # verify if we have a valid buffer_id, if yes avoid to send both\n                # flow_mod & packet_out\n                if msg.buffer_id != ofproto.OFP_NO_BUFFER:\n                    self.add_flow(datapath, 1, match, actions, msg.buffer_id)\n                    return\n                else:\n                    self.add_flow(datapath, 1, match, actions)\n        data = None\n        if msg.buffer_id == ofproto.OFP_NO_BUFFER:\n            data = msg.data\n\n        out = parser.OFPPacketOut(datapath=datapath, buffer_id=msg.buffer_id,\n                                  in_port=in_port, actions=actions, data=data)\n        datapath.send_msg(out)"
        }
    ]
}